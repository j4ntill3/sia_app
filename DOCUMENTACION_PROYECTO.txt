========================================
DOCUMENTACIÓN DEL PROYECTO
SIA - Sistema de Inmuebles y Agentes
========================================

Escuela Normal y Superior de Comercio Nº 46 Domingo Guzmán Silva
Prácticas Profesionalizantes 2

Docente: Martin Pralong

Alumnos:
- Nicolas Ybañez
- José Antille
- Javier Bar

========================================
ÍNDICE
========================================

1. Introducción
   1.1. Objetivo del Documento
   1.2. Breve Descripción del Proyecto

2. Título del Proyecto

3. Planteamiento del Sistema

4. Alcance y Justificación
   4.1. Alcance
   4.2. Justificación

5. Objetivos
   5.1. Objetivo General
   5.2. Objetivos Específicos

6. Análisis
   6.1. Definición de Requerimientos
   6.2. Requerimientos Funcionales
   6.3. Requerimientos No Funcionales

7. Descripción del Sistema Propuesto

8. Tecnologías Utilizadas
   8.1. Frontend
   8.2. Backend
   8.3. Base de Datos

9. Arquitectura del Sistema
   9.1. Modelo de Datos
   9.2. Estructura de la Aplicación
   9.3. Sistema de Autenticación

10. Roles de Usuario
    10.1. Tipos de Usuario
    10.2. Secciones del Sistema
    10.3. Permisos por Rol

11. Funcionalidades Implementadas
    11.1. Gestión de Inmuebles
    11.2. Gestión de Agentes
    11.3. Gestión de Consultas de Clientes
    11.4. Asignación de Inmuebles a Agentes
    11.5. Generación de Informes

12. Seguridad
    12.1. Autenticación y Autorización
    12.2. Protección de Datos
    12.3. Contraseñas y Encriptación

13. Conclusiones

========================================

1. INTRODUCCIÓN

1.1. Objetivo del Documento

Este documento tiene como propósito presentar y documentar de manera integral el proyecto de desarrollo de software realizado para la cátedra de "Prácticas Profesionalizantes 2" de la carrera de Tecnicatura Superior en Desarrollo de Software, impartida en la Escuela Normal y Superior de Comercio Nº 46 Domingo Guzmán Silva.

El presente trabajo detalla todos los aspectos relevantes del sistema desarrollado, incluyendo sus fundamentos teóricos, alcance, objetivos, análisis de requerimientos, diseño técnico, implementación y funcionalidades. Este documento servirá como referencia técnica completa del proyecto, proporcionando una visión integral tanto de la planificación como de la ejecución del mismo.

Se busca demostrar la aplicación práctica de los conocimientos adquiridos durante la formación académica, evidenciando las competencias técnicas y profesionales desarrolladas en el ámbito del desarrollo de software empresarial.

1.2. Breve Descripción del Proyecto

El proyecto consiste en el desarrollo de un sistema integral de gestión inmobiliaria diseñado específicamente para centralizar y optimizar la administración de información relacionada con inmuebles, agentes inmobiliarios y clientes. El sistema fue concebido como una solución tecnológica que permite a las empresas del sector inmobiliario gestionar de manera eficiente sus operaciones diarias.

La plataforma desarrollada permite registrar y administrar información detallada de cada propiedad, incluyendo características físicas, ubicación geográfica, estado de disponibilidad, imágenes y descripciones. Asimismo, facilita la gestión de los agentes inmobiliarios como empleados de la organización, controlando sus datos personales, información de contacto y asignaciones de propiedades.

Una de las funcionalidades clave del sistema es la capacidad de registrar y hacer seguimiento de las consultas realizadas por clientes potenciales, permitiendo a los agentes mantener un historial completo de interacciones y mejorar la calidad del servicio ofrecido. Adicionalmente, el sistema incorpora herramientas de generación de reportes que facilitan el análisis de datos y la toma de decisiones estratégicas.

El sistema fue diseñado bajo una arquitectura moderna y escalable, utilizando tecnologías web actuales que garantizan accesibilidad, rendimiento y seguridad en el manejo de la información empresarial.


========================================

2. TÍTULO DEL PROYECTO

SIA - Sistema de Inmuebles y Agentes


========================================

3. PLANTEAMIENTO DEL SISTEMA

El presente sistema se desarrolla en respuesta a una necesidad identificada en el sector inmobiliario: la falta de herramientas integradas para centralizar y gestionar eficientemente la información generada en las interacciones entre agentes inmobiliarios, clientes e inmuebles.

En el contexto actual, muchas empresas inmobiliarias dependen de métodos informales y descentralizados para gestionar sus operaciones. Los agentes suelen utilizar canales de comunicación como WhatsApp, llamadas telefónicas o correos electrónicos personales para interactuar con sus clientes. Si bien estos medios son efectivos para la comunicación inmediata, no permiten almacenar, organizar ni analizar la información de valor generada en estas interacciones.

Esta situación deriva en diversas problemáticas:

- Pérdida de información valiosa sobre consultas de clientes y preferencias
- Dificultad para realizar seguimiento de potenciales compradores o inquilinos
- Imposibilidad de generar estadísticas sobre inmuebles más consultados
- Duplicación de esfuerzos cuando múltiples agentes atienden al mismo cliente
- Falta de trazabilidad en las gestiones realizadas
- Ausencia de respaldo documental de las interacciones
- Dificultad para que administradores supervisen la actividad de los agentes

El SIA surge como solución a estas problemáticas, ofreciendo una plataforma centralizada que permite registrar cada inmueble con sus características específicas, asignarlos a agentes responsables, y documentar cada consulta recibida con la información completa del cliente interesado. De esta manera, la empresa cuenta con un repositorio organizado de información que puede ser consultado, analizado y utilizado para mejorar la eficiencia operativa y la calidad del servicio.

Además, el sistema contempla diferentes niveles de acceso según el rol del usuario, permitiendo que los agentes gestionen sus propios inmuebles y consultas, mientras que los administradores tienen una visión global de toda la operación, pudiendo generar reportes y tomar decisiones estratégicas basadas en datos concretos.


========================================

4. ALCANCE Y JUSTIFICACIÓN

4.1. Alcance

Este proyecto tiene como alcance principal el desarrollo de un software empresarial a medida, diseñado para funcionar como una intranet corporativa para organizaciones dedicadas a la comercialización de inmuebles. Su propósito es centralizar y optimizar la gestión de información y procesos internos, permitiendo una administración más eficiente, organizada y trazable dentro de la empresa.

El sistema desarrollado abarca las siguientes áreas funcionales:

GESTIÓN DE INMUEBLES:
- Registro completo de propiedades con toda su información relevante (ubicación, características, superficies, comodidades)
- Carga de múltiples imágenes por inmueble con designación de imagen principal
- Clasificación por categorías (casa, departamento, terreno, local comercial, etc.)
- Control de estados (disponible, reservado, vendido, alquilado)
- Organización geográfica por localidad, zona y barrio
- Búsqueda y filtrado de inmuebles
- Actualización y eliminación lógica de registros

GESTIÓN DE USUARIOS Y EMPLEADOS:
- Creación y administración de cuentas de usuario
- Sistema de roles diferenciados (Administrador y Agente)
- Registro de agentes inmobiliarios como empleados de la empresa
- Control de información personal: DNI, CUIT, datos de contacto, fecha de ingreso
- Gestión de fotografías de perfil
- Generación automática de contraseñas temporales seguras
- Autenticación y control de acceso basado en roles

ASIGNACIÓN Y CONTROL:
- Asignación de inmuebles específicos a agentes responsables
- Visualización personalizada para cada agente de sus inmuebles asignados
- Reasignación de propiedades cuando sea necesario
- Trazabilidad de responsabilidades

GESTIÓN DE CONSULTAS DE CLIENTES:
- Registro de consultas realizadas por clientes potenciales
- Captura de datos del consultante (nombre, apellido, teléfono, correo electrónico)
- Vinculación de consultas con inmuebles específicos y agentes
- Registro de fecha y descripción de la consulta
- Visualización de todas las consultas para administradores
- Visualización de consultas propias para cada agente

GENERACIÓN DE REPORTES:
- Exportación de listados de inmuebles a formato CSV
- Exportación de listados de agentes a formato CSV
- Exportación de consultas de clientes a formato CSV
- Reportes descargables para análisis externo

GESTIÓN DE DATOS MAESTROS:
- Administración de categorías de inmuebles
- Administración de estados de inmuebles
- Gestión de localidades, zonas y barrios
- Interface administrativa para crear, modificar y eliminar estas entidades

El sistema está diseñado con una arquitectura escalable que permite la incorporación de nuevas funcionalidades en el futuro, tales como:
- Módulo de contratos y documentación legal
- Sistema de calendario y agendamiento de visitas
- Chat interno entre agentes y administradores
- Dashboard con métricas y KPIs
- Notificaciones automáticas
- Integración con portales inmobiliarios externos

La implementación actual se enfoca en proporcionar una base sólida y funcional que cubra las necesidades operativas esenciales, garantizando estabilidad, seguridad y usabilidad. El diseño modular facilita la evolución del sistema conforme crezcan los requerimientos del negocio.

4.2. Justificación

El desarrollo de este sistema de gestión inmobiliaria se justifica por múltiples factores que impactan directamente en la eficiencia operativa, la calidad del servicio y la competitividad de las empresas del sector.

JUSTIFICACIÓN TÉCNICA:

La falta de sistemas integrados de gestión en el ámbito inmobiliario genera ineficiencias significativas. Muchas inmobiliarias operan con información fragmentada en diferentes herramientas: hojas de cálculo para el inventario de propiedades, aplicaciones de mensajería para comunicación con clientes, y documentos físicos para registros. Esta dispersión dificulta el acceso a la información, genera duplicación de datos y aumenta el riesgo de pérdidas o inconsistencias.

El SIA aborda estos problemas proporcionando:

1. CENTRALIZACIÓN DE INFORMACIÓN: Toda la información relevante se almacena en una única base de datos estructurada, accesible desde cualquier punto con conexión a internet, eliminando la fragmentación y facilitando la consulta.

2. INTEGRIDAD Y CONSISTENCIA: El uso de una base de datos relacional con restricciones de integridad garantiza que la información sea coherente y confiable, evitando duplicados y referencias inválidas.

3. TRAZABILIDAD COMPLETA: Cada operación queda registrada con información del usuario responsable y marca temporal, permitiendo auditorías y seguimiento detallado de las actividades.

4. AUTOMATIZACIÓN DE PROCESOS: Tareas como la asignación de inmuebles, el registro de consultas y la generación de reportes se simplifican mediante interfaces intuitivas, reduciendo el tiempo operativo.

JUSTIFICACIÓN OPERATIVA:

Desde el punto de vista operativo, el sistema aporta mejoras sustanciales:

1. MEJORA EN LA ATENCIÓN AL CLIENTE: Los agentes pueden acceder rápidamente a la información completa de cualquier inmueble asignado y consultar el historial de interacciones con clientes, mejorando la calidad y personalización del servicio.

2. GESTIÓN DE CARTERA: Los administradores obtienen visibilidad completa del inventario de propiedades, su estado actual, los agentes responsables y el nivel de consultas recibidas, facilitando la toma de decisiones sobre estrategias comerciales.

3. REDUCCIÓN DE ERRORES: La validación de datos en el momento del ingreso y las restricciones de la base de datos minimizan errores humanos que podrían generar problemas en la gestión.

4. ESCALABILIDAD OPERATIVA: A medida que la empresa crece, el sistema puede manejar volúmenes crecientes de información sin degradación del rendimiento, algo imposible con métodos manuales.

JUSTIFICACIÓN ESTRATÉGICA:

A nivel estratégico, contar con un sistema de información propio proporciona ventajas competitivas:

1. TOMA DE DECISIONES BASADA EN DATOS: La capacidad de generar reportes permite analizar tendencias, identificar inmuebles más consultados, evaluar el desempeño de agentes y detectar oportunidades de mercado.

2. PROFESIONALIZACIÓN DEL SERVICIO: Disponer de tecnología propia mejora la imagen de la empresa frente a clientes y competidores, transmitiendo seriedad y modernidad.

3. INDEPENDENCIA TECNOLÓGICA: Al desarrollar un sistema a medida, la empresa no depende de proveedores externos de software que podrían aumentar costos, descontinuar el servicio o no adaptarse a necesidades específicas.

4. ADAPTABILIDAD: La arquitectura del sistema permite incorporar funcionalidades específicas del negocio que sistemas genéricos no ofrecen.

JUSTIFICACIÓN ECONÓMICA:

Desde la perspectiva económica, la inversión en este sistema se justifica por:

1. REDUCCIÓN DE COSTOS OPERATIVOS: Al automatizar procesos y centralizar información, se reduce el tiempo que los empleados dedican a tareas administrativas repetitivas.

2. PREVENCIÓN DE PÉRDIDAS: El registro sistematizado de consultas evita que potenciales clientes sean olvidados o descuidados, maximizando las oportunidades de concretar operaciones.

3. OPTIMIZACIÓN DE RECURSOS HUMANOS: Los administradores pueden supervisar el trabajo de múltiples agentes de manera eficiente sin necesidad de controles manuales constantes.

4. RETORNO DE INVERSIÓN A MEDIANO PLAZO: Aunque el desarrollo inicial requiere inversión de tiempo y recursos, el sistema provee valor continuo sin costos recurrentes significativos.

JUSTIFICACIÓN ACADÉMICA:

Desde el punto de vista académico, este proyecto permite:

1. APLICACIÓN PRÁCTICA DE CONOCIMIENTOS: Los estudiantes aplican conceptos de ingeniería de software, bases de datos, programación web, arquitectura de sistemas y gestión de proyectos en un contexto real.

2. DESARROLLO DE COMPETENCIAS PROFESIONALES: La experiencia de diseñar, implementar y documentar un sistema completo prepara a los estudiantes para los desafíos del mundo laboral.

3. RESOLUCIÓN DE PROBLEMAS REALES: Al abordar necesidades concretas del sector inmobiliario, el proyecto trasciende el ámbito académico y genera un producto con utilidad práctica.

En conclusión, la justificación del proyecto SIA se sustenta en beneficios técnicos, operativos, estratégicos y económicos que transforman la manera en que las empresas inmobiliarias gestionan su información, mejorando su eficiencia, competitividad y capacidad de crecimiento sostenible. Este sistema representa una inversión estratégica esencial para cualquier organización del sector que busque modernizar sus procesos y aprovechar las ventajas de la transformación digital.


========================================

5. OBJETIVOS

El desarrollo del Sistema de Inmuebles y Agentes (SIA) persigue objetivos claros orientados a mejorar la gestión operativa de empresas inmobiliarias mediante la implementación de herramientas tecnológicas modernas, seguras y escalables.

5.1. Objetivo General

Diseñar, desarrollar e implementar un sistema integral de gestión inmobiliaria basado en tecnologías web que permita centralizar la información de propiedades, agentes y consultas de clientes, facilitando la administración eficiente de procesos internos, mejorando la trazabilidad de operaciones y optimizando la toma de decisiones estratégicas mediante el acceso controlado y seguro a datos estructurados y actualizados.

5.2. Objetivos Específicos

1. IMPLEMENTAR UNA BASE DE DATOS CENTRALIZADA Y ESTRUCTURADA
   Desarrollar un modelo de datos relacional robusto que almacene de manera organizada y segura toda la información relevante del negocio inmobiliario, garantizando integridad referencial, consistencia de datos y capacidad de consulta eficiente mediante el motor de base de datos PostgreSQL.

2. DESARROLLAR MÓDULO DE GESTIÓN INTEGRAL DE INMUEBLES
   Crear funcionalidades completas para el registro, consulta, actualización y eliminación de propiedades, incluyendo la capacidad de asociar múltiples imágenes, clasificarlas por categorías y estados, organizarlas geográficamente y permitir búsquedas y filtrados eficientes por diversos criterios.

3. IMPLEMENTAR SISTEMA DE GESTIÓN DE AGENTES INMOBILIARIOS
   Desarrollar las capacidades necesarias para administrar el personal de agentes como empleados de la empresa, registrando sus datos personales, información laboral (CUIT, fechas de ingreso/egreso), fotografías de perfil y vinculación con cuentas de usuario del sistema.

4. CREAR SISTEMA DE AUTENTICACIÓN Y CONTROL DE ACCESO BASADO EN ROLES
   Implementar un mecanismo seguro de autenticación mediante credenciales, diferenciando roles de usuario (Administrador y Agente) con permisos y restricciones específicas para cada nivel, garantizando que cada usuario acceda únicamente a las funcionalidades y datos correspondientes a su función.

5. DESARROLLAR FUNCIONALIDAD DE ASIGNACIÓN DE INMUEBLES A AGENTES
   Crear el mecanismo que permite asignar propiedades específicas a agentes responsables, facilitando la distribución de cartera, el control de responsabilidades y la visualización personalizada para cada agente de los inmuebles que tiene a su cargo.

6. IMPLEMENTAR MÓDULO DE REGISTRO Y GESTIÓN DE CONSULTAS DE CLIENTES
   Desarrollar las funcionalidades que permitan a los agentes registrar cada consulta recibida de clientes potenciales, capturando datos del consultante, inmueble de interés, fecha y descripción de la consulta, generando un historial completo de interacciones que facilite el seguimiento comercial.

7. INCORPORAR CAPACIDADES DE GENERACIÓN DE REPORTES Y EXPORTACIÓN DE DATOS
   Implementar herramientas que permitan exportar listados de inmuebles, agentes y consultas en formato CSV, facilitando el análisis externo de datos, la generación de respaldos de información y la integración con otras herramientas de análisis y presentación.

8. GARANTIZAR LA SEGURIDAD DE LA INFORMACIÓN MEDIANTE ENCRIPTACIÓN Y BUENAS PRÁCTICAS
   Aplicar técnicas de seguridad informática como el cifrado de contraseñas mediante algoritmos robustos (bcrypt), la generación de contraseñas temporales aleatorias, la validación de datos de entrada y la protección contra vulnerabilidades comunes en aplicaciones web.

9. DISEÑAR UNA INTERFAZ DE USUARIO INTUITIVA Y RESPONSIVA
   Crear una experiencia de usuario fluida y accesible mediante interfaces gráficas modernas, responsivas y fáciles de usar, que no requieran capacitación técnica extensa y se adapten a diferentes dispositivos (computadoras de escritorio, tablets y dispositivos móviles).

10. ASEGURAR LA ESCALABILIDAD Y MANTENIBILIDAD DEL SISTEMA
    Desarrollar el sistema siguiendo principios de arquitectura de software que faciliten su evolución futura, documentar adecuadamente el código, utilizar patrones de diseño reconocidos y estructurar el proyecto de manera modular para permitir la incorporación de nuevas funcionalidades sin afectar las existentes.

11. IMPLEMENTAR GESTIÓN COMPLETA DE DATOS MAESTROS
    Proporcionar interfaces administrativas para la gestión de entidades base del sistema (categorías de inmuebles, estados, localidades, zonas y barrios), permitiendo a los administradores mantener actualizadas las opciones de clasificación y organización.

12. GARANTIZAR LA DISPONIBILIDAD Y ACCESIBILIDAD DEL SISTEMA
    Desarrollar una aplicación web accesible mediante navegadores estándar desde cualquier ubicación con conexión a internet, sin requerir instalación de software especializado, facilitando el trabajo remoto y la movilidad de los usuarios.

El cumplimiento de estos objetivos específicos contribuye directamente al logro del objetivo general, asegurando que el sistema SIA sea una herramienta completa, eficiente y valiosa para la gestión inmobiliaria empresarial.


========================================

6. ANÁLISIS

6.1. Definición de Requerimientos

El análisis de requerimientos constituye la base fundamental sobre la cual se diseñó e implementó el Sistema de Inmuebles y Agentes. Este proceso implicó la identificación detallada de las necesidades funcionales y no funcionales que el sistema debía satisfacer para cumplir con los objetivos planteados y resolver las problemáticas identificadas en el sector inmobiliario.

Los requerimientos fueron clasificados en dos categorías principales:

- REQUERIMIENTOS FUNCIONALES: Describen las funcionalidades específicas que el sistema debe proveer, es decir, qué debe hacer el sistema en términos de operaciones, servicios y comportamientos.

- REQUERIMIENTOS NO FUNCIONALES: Especifican criterios de calidad que el sistema debe cumplir, como rendimiento, seguridad, usabilidad y mantenibilidad, definiendo cómo debe funcionar el sistema.

Esta clasificación permitió un enfoque estructurado durante el desarrollo, asegurando que tanto las capacidades operativas como los atributos de calidad fueran contemplados desde las etapas iniciales del proyecto.

6.2. Requerimientos Funcionales

Los requerimientos funcionales definen las capacidades y servicios específicos que el sistema debe ofrecer a sus usuarios. A continuación se detallan organizados por módulo:

RF01 - GESTIÓN DE INMUEBLES

El sistema debe permitir la administración completa del catálogo de propiedades, incluyendo:

- Creación de nuevos registros de inmuebles con los siguientes datos:
  * Categoría (Casa, Departamento, Terreno, Local Comercial, etc.)
  * Ubicación geográfica (Localidad, Zona, Barrio)
  * Dirección completa
  * Características físicas (cantidad de dormitorios, baños, superficie total)
  * Comodidades (cochera, patio, etc.)
  * Estado actual (Disponible, Reservado, Vendido, Alquilado)
  * Descripción textual detallada
  * Múltiples imágenes fotográficas con designación de imagen principal

- Consulta y visualización de inmuebles registrados:
  * Listado paginado de todas las propiedades
  * Vista detallada individual con toda la información e imágenes
  * Búsqueda y filtrado por diferentes criterios (dirección, barrio, zona, localidad, categoría)

- Actualización de información de inmuebles existentes:
  * Modificación de cualquier campo de datos
  * Adición o eliminación de imágenes
  * Cambio de estado de la propiedad

- Eliminación lógica de inmuebles:
  * Marcado de inmuebles como eliminados sin borrado físico de datos
  * Exclusión automática de inmuebles eliminados de los listados visibles
  * Preservación de integridad referencial con consultas históricas

- Generación de reportes de inmuebles:
  * Exportación del catálogo completo a formato CSV
  * Inclusión de datos principales para análisis externo

RF02 - GESTIÓN DE USUARIOS Y EMPLEADOS

El sistema debe proporcionar capacidades completas para la administración de usuarios del sistema:

- Creación de cuentas de usuario vinculadas a personas:
  * Registro de datos personales (nombre, apellido, DNI, fecha de nacimiento)
  * Datos de contacto (correo electrónico, teléfono, dirección)
  * Fotografía de perfil
  * Asignación de rol (Administrador o Agente)
  * Generación automática de contraseña temporal aleatoria y segura

- Gestión de agentes inmobiliarios como empleados:
  * Registro de información laboral (CUIT, fecha de ingreso, fecha de egreso)
  * Vinculación con datos de la persona
  * Creación automática de cuenta de usuario con rol de Agente
  * Tipo de empleado: Agente inmobiliario

- Consulta de agentes:
  * Listado completo de agentes activos en el sistema
  * Vista detallada con información personal y laboral
  * Visualización de fotografía de perfil

- Actualización de datos de agentes:
  * Modificación de información personal y laboral
  * Cambio de fotografía de perfil
  * Actualización de datos de contacto

- Eliminación lógica de agentes:
  * Marcado de agentes como inactivos sin borrado físico
  * Conservación de historial de consultas y asignaciones

- Generación de reportes de agentes:
  * Exportación del listado de agentes a formato CSV
  * Inclusión de datos personales, laborales y estado

RF03 - AUTENTICACIÓN Y AUTORIZACIÓN

El sistema debe implementar mecanismos robustos de control de acceso:

- Autenticación de usuarios:
  * Inicio de sesión mediante correo electrónico y contraseña
  * Validación de credenciales contra base de datos
  * Generación de sesión segura tras autenticación exitosa
  * Cierre de sesión y finalización de sesión activa

- Control de acceso basado en roles:
  * Diferenciación de permisos según rol de usuario (Administrador o Agente)
  * Restricción de acceso a funcionalidades según autorización
  * Validación de rol en cada operación sensible

- Gestión de contraseñas:
  * Almacenamiento de contraseñas mediante hash criptográfico (bcrypt)
  * Generación de contraseñas temporales aleatorias para nuevos usuarios
  * Verificación segura de contraseñas durante autenticación

RF04 - ASIGNACIÓN DE INMUEBLES A AGENTES

El sistema debe facilitar la distribución de responsabilidades sobre propiedades:

- Asignación de inmuebles a agentes responsables:
  * Vinculación de uno o más agentes con inmuebles específicos
  * Validación de existencia de inmueble y agente antes de asignación
  * Reasignación cuando sea necesario cambiar el responsable

- Consulta de asignaciones:
  * Visualización para administradores de todos los inmuebles y sus agentes asignados
  * Vista personalizada para agentes mostrando únicamente sus inmuebles asignados

- Gestión de asignaciones:
  * Eliminación lógica de asignaciones anteriores al reasignar
  * Trazabilidad de cambios de responsabilidad

RF05 - GESTIÓN DE CONSULTAS DE CLIENTES

El sistema debe permitir el registro y seguimiento de interacciones con clientes potenciales:

- Registro de consultas por parte de agentes:
  * Captura de datos del cliente consultante (nombre, apellido, teléfono, correo electrónico)
  * Vinculación con el inmueble de interés
  * Registro automático del agente que atiende la consulta
  * Fecha y hora automática de la consulta
  * Descripción o comentarios adicionales de la consulta

- Validación de permisos:
  * Verificación de que el agente esté asignado al inmueble consultado
  * Restricción para evitar registro de consultas sobre inmuebles no asignados

- Consulta de registros de consultas:
  * Listado completo para administradores de todas las consultas del sistema
  * Listado para agentes únicamente de sus propias consultas
  * Ordenamiento por fecha (más recientes primero)
  * Visualización de datos completos del consultante e inmueble

- Generación de reportes de consultas:
  * Exportación de listados a formato CSV
  * Inclusión de datos del cliente, fecha, inmueble y agente responsable

RF06 - GESTIÓN DE DATOS MAESTROS

El sistema debe permitir la administración de entidades de clasificación y organización:

- Gestión de categorías de inmuebles:
  * Creación de nuevas categorías (Casa, Departamento, Terreno, etc.)
  * Consulta de categorías existentes
  * Eliminación de categorías sin inmuebles asociados

- Gestión de estados de inmuebles:
  * Creación de estados (Disponible, Reservado, Vendido, Alquilado, etc.)
  * Consulta de estados disponibles
  * Eliminación de estados no utilizados

- Gestión de localidades:
  * Registro de localidades/ciudades
  * Consulta de listado de localidades
  * Eliminación de localidades sin dependencias

- Gestión de zonas:
  * Registro de zonas dentro de localidades
  * Vinculación con localidad correspondiente
  * Consulta y eliminación de zonas

- Gestión de barrios:
  * Registro de barrios dentro de localidades
  * Vinculación con localidad correspondiente
  * Consulta y eliminación de barrios

Restricciones de acceso:
  * Únicamente usuarios con rol Administrador pueden gestionar datos maestros

RF07 - BÚSQUEDA Y FILTRADO

El sistema debe proporcionar mecanismos eficientes de búsqueda:

- Búsqueda de inmuebles por múltiples criterios:
  * Por dirección (coincidencia parcial)
  * Por barrio
  * Por zona
  * Por localidad
  * Por categoría

- Aplicación de búsqueda en tiempo real:
  * Filtrado inmediato conforme el usuario escribe
  * Coincidencias insensibles a mayúsculas/minúsculas

RF08 - PAGINACIÓN

El sistema debe manejar grandes volúmenes de datos mediante paginación:

- Listados paginados de inmuebles:
  * 5 elementos por página por defecto
  * Navegación entre páginas
  * Visualización del número de página actual y total

- Control de paginación:
  * Navegación a página siguiente/anterior
  * Indicador de página actual
  * Total de elementos disponibles

RF09 - GESTIÓN DE IMÁGENES

El sistema debe manejar archivos multimedia asociados a entidades:

- Carga de imágenes de inmuebles:
  * Soporte para múltiples imágenes por propiedad
  * Recepción en formato Base64
  * Conversión y almacenamiento como archivos en servidor
  * Generación de nombres únicos para evitar colisiones

- Designación de imagen principal:
  * Marcado automático de la primera imagen como principal
  * Visualización prioritaria de imagen principal en listados

- Carga de fotografías de perfil de agentes:
  * Asociación de imagen con persona/empleado
  * Almacenamiento seguro en servidor
  * Visualización en perfil y listados

6.3. Requerimientos No Funcionales

Los requerimientos no funcionales establecen atributos de calidad y restricciones técnicas que el sistema debe cumplir:

RNF01 - USABILIDAD

- Interfaz intuitiva y fácil de usar que no requiera capacitación técnica extensa
- Diseño visual limpio y profesional utilizando principios modernos de UI/UX
- Mensajes de error claros y orientados al usuario
- Retroalimentación visual de acciones (carga, éxito, error)
- Navegación coherente y predecible
- Curva de aprendizaje baja para nuevos usuarios

RNF02 - SEGURIDAD

- Autenticación obligatoria para acceder al sistema
- Autorización basada en roles antes de permitir operaciones sensibles
- Contraseñas almacenadas mediante hash criptográfico seguro (bcrypt con salt)
- Generación de contraseñas temporales aleatorias y robustas
- Protección contra inyección SQL mediante uso de ORM (Prisma)
- Validación de datos de entrada en cliente y servidor
- Sesiones con tokens seguros gestionadas por NextAuth
- Protección de rutas sensibles mediante middleware
- Retorno de errores genéricos que no expongan detalles del sistema

RNF03 - DISPONIBILIDAD

- Sistema accesible 24/7 mediante navegador web
- Sin requerimiento de instalación de software cliente
- Compatibilidad con navegadores modernos (Chrome, Firefox, Edge, Safari)
- Accesibilidad desde cualquier ubicación con conexión a internet

RNF04 - RENDIMIENTO

- Tiempo de respuesta de consultas menor a 2 segundos en condiciones normales
- Capacidad de manejar múltiples usuarios concurrentes (mínimo 20 simultáneos)
- Paginación de resultados para evitar sobrecarga en listados grandes
- Consultas optimizadas a base de datos mediante índices apropiados
- Carga eficiente de imágenes

RNF05 - ESCALABILIDAD

- Arquitectura modular que facilite adición de nuevas funcionalidades
- Diseño de base de datos normalizado y extensible
- Separación clara entre frontend, backend y base de datos
- Código organizado en componentes y módulos reutilizables
- Capacidad de crecimiento del volumen de datos sin degradación crítica de rendimiento

RNF06 - MANTENIBILIDAD

- Código fuente documentado con comentarios explicativos
- Estructura de proyecto organizada siguiendo convenciones estándar de Next.js
- Uso de TypeScript para tipado estático y reducción de errores
- Nombres de variables y funciones descriptivos y en idioma consistente
- Separación de lógica de negocio, presentación y acceso a datos
- Versionamiento de código mediante Git
- Documentación técnica del sistema

RNF07 - PORTABILIDAD

- Aplicación web accesible desde múltiples plataformas (Windows, macOS, Linux)
- Diseño responsivo que se adapta a diferentes tamaños de pantalla
- Soporte para dispositivos móviles (tablets y smartphones)

RNF08 - CONFIABILIDAD

- Implementación de soft delete para evitar pérdida accidental de datos
- Validación de integridad referencial en base de datos
- Manejo de errores con mensajes informativos
- Logs de errores en servidor para diagnóstico
- Transacciones de base de datos para operaciones críticas

RNF09 - CUMPLIMIENTO DE ESTÁNDARES

- Cumplimiento de estándares web W3C en HTML y CSS
- Uso de HTTPS para comunicaciones seguras (en producción)
- Respeto de buenas prácticas de desarrollo web
- Aplicación de patrones de diseño reconocidos
- Uso de bibliotecas y frameworks ampliamente adoptados y mantenidos

RNF10 - COMPATIBILIDAD

- Compatible con PostgreSQL como sistema gestor de base de datos
- Funcionamiento en entornos de servidor Node.js
- Despliegue compatible con plataformas cloud (Vercel, AWS, etc.)

RNF11 - INTERNACIONALIZACIÓN Y LOCALIZACIÓN

- Interfaz de usuario en idioma español
- Formatos de fecha según convenciones de Argentina
- Campos de texto compatibles con caracteres especiales del español (ñ, acentos)


========================================

7. DESCRIPCIÓN DEL SISTEMA PROPUESTO

El Sistema de Inmuebles y Agentes (SIA) es una aplicación web empresarial desarrollada específicamente para optimizar la gestión integral de empresas dedicadas a la comercialización de propiedades inmobiliarias. El sistema se concibe como una plataforma centralizada, segura y accesible que facilita la coordinación entre diferentes actores del negocio inmobiliario.

CARACTERÍSTICAS PRINCIPALES:

El sistema se estructura como una intranet corporativa accesible mediante navegadores web, eliminando la necesidad de instalación de software especializado en los equipos de los usuarios. Esta decisión arquitectónica garantiza accesibilidad universal desde cualquier dispositivo con conexión a internet, facilitando el trabajo remoto y la movilidad de los agentes inmobiliarios.

La plataforma se fundamenta en una base de datos PostgreSQL centralizada que constituye el núcleo del sistema. Esta base de datos almacena y organiza toda la información relevante del negocio: catálogo de inmuebles con sus características detalladas, datos de agentes inmobiliarios y empleados, registros de consultas de clientes, información geográfica de organización territorial, y metadatos de clasificación.

ARQUITECTURA Y ORGANIZACIÓN:

El sistema implementa una arquitectura de tres capas claramente diferenciadas:

1. CAPA DE PRESENTACIÓN (Frontend):
Desarrollada con React y Next.js, proporciona las interfaces visuales con las que interactúan los usuarios. Esta capa incluye páginas para listados de inmuebles con visualización tipo galería, formularios de alta y edición de propiedades con carga de imágenes, interfaces de gestión de agentes con fotografías de perfil, pantallas de registro de consultas de clientes, paneles administrativos para gestión de datos maestros, y funcionalidades de búsqueda y filtrado en tiempo real.

2. CAPA DE LÓGICA DE NEGOCIO (Backend):
También implementada con Next.js mediante API Routes, contiene toda la lógica operativa del sistema. Maneja la autenticación y autorización de usuarios, validación de datos ingresados mediante esquemas Zod, procesamiento de operaciones CRUD sobre todas las entidades, gestión de asignaciones entre agentes e inmuebles, control de permisos según roles, procesamiento y almacenamiento de archivos de imágenes, generación de exportaciones CSV, y manejo de errores y excepciones.

3. CAPA DE DATOS:
Constituida por la base de datos PostgreSQL gestionada mediante el ORM Prisma. Esta capa asegura persistencia confiable de información, integridad referencial entre entidades relacionadas, consultas optimizadas mediante índices, transacciones ACID para operaciones críticas, y respaldo de datos históricos mediante eliminación lógica.

FLUJOS OPERATIVOS PRINCIPALES:

GESTIÓN DE INMUEBLES:
Los usuarios administradores acceden al formulario de alta de inmuebles donde ingresan todos los datos de la propiedad: seleccionan categoría, estado, localidad, zona y barrio desde listas desplegables pobladas con datos maestros; ingresan dirección, cantidad de dormitorios y baños, superficie, y marcan si tiene cochera; agregan una descripción detallada; y cargan múltiples fotografías que se procesan y almacenan en el servidor. Una vez creado, el inmueble aparece en el listado general accesible para todos los usuarios autenticados. Los administradores pueden editarlo posteriormente o marcarlo como eliminado si ya no es relevante.

GESTIÓN DE AGENTES:
Los administradores registran nuevos agentes ingresando datos personales (nombre, apellido, DNI, fecha de nacimiento, datos de contacto), datos laborales (CUIT, fecha de ingreso), y opcionalmente una fotografía de perfil. El sistema genera automáticamente una contraseña temporal aleatoria que se devuelve al administrador para que la comunique al agente de forma segura. Se crea simultáneamente la cuenta de usuario con rol de Agente vinculada al empleado. El agente puede luego iniciar sesión con su correo y contraseña temporal.

ASIGNACIÓN DE INMUEBLES:
Los administradores asignan propiedades específicas a agentes responsables. Esta asignación determina qué agentes pueden registrar consultas sobre qué inmuebles. Un inmueble puede reasignarse a un agente diferente cuando sea necesario, marcando la asignación anterior como eliminada y creando una nueva.

REGISTRO DE CONSULTAS:
Los agentes, al recibir una consulta de un cliente interesado en una propiedad, acceden a la funcionalidad de registro de consultas. Seleccionan el inmueble de interés desde su listado de inmuebles asignados, ingresan los datos del cliente consultante (nombre, apellido, teléfono, correo), agregan una descripción de la consulta, y guardan el registro. El sistema verifica automáticamente que el agente tenga permiso sobre ese inmueble. La consulta queda registrada con marca temporal automática y vinculada al agente, inmueble y cliente.

CONSULTA DE INFORMACIÓN:
Los usuarios pueden consultar listados de inmuebles con opciones de búsqueda y filtrado, ver detalles completos de cada propiedad incluyendo todas sus imágenes, acceder a información de agentes (administradores), revisar el historial de consultas (administradores ven todas, agentes solo las propias), y navegar entre páginas de resultados cuando hay muchos registros.

GENERACIÓN DE REPORTES:
Los administradores pueden exportar listados completos de inmuebles, agentes o consultas en formato CSV. Estos archivos pueden abrirse en Excel u otras herramientas para análisis adicional, generación de gráficos o presentaciones.

CONTROL DE ACCESO:

El sistema implementa un riguroso control de acceso diferenciado por roles:

ADMINISTRADORES tienen permisos completos:
- Visualizar todos los inmuebles, agentes y consultas del sistema
- Crear, modificar y eliminar inmuebles
- Crear, modificar y eliminar agentes
- Asignar y reasignar inmuebles a agentes
- Gestionar datos maestros (categorías, estados, localidades, zonas, barrios)
- Generar y exportar reportes
- Acceder a estadísticas globales

AGENTES tienen permisos limitados:
- Visualizar listado general de inmuebles (solo consulta)
- Visualizar detalle de sus inmuebles asignados
- Registrar consultas de clientes únicamente sobre sus inmuebles asignados
- Consultar el historial de sus propias consultas
- Actualizar sus datos personales (funcionalidad futura)

SEGURIDAD:

El sistema implementa múltiples capas de seguridad:

- Autenticación obligatoria: Ninguna funcionalidad es accesible sin iniciar sesión
- Contraseñas cifradas: Todas las contraseñas se almacenan mediante hash bcrypt con salt
- Contraseñas temporales robustas: Generación aleatoria de 12 caracteres con mayúsculas, minúsculas, números y símbolos
- Validación de entrada: Todos los datos ingresados se validan en frontend y backend
- Protección SQL: Uso de ORM Prisma que previene inyección SQL
- Sesiones seguras: Gestión de sesiones mediante NextAuth con tokens
- Autorización por endpoint: Cada operación valida el rol del usuario
- Eliminación lógica: Preservación de datos históricos mediante soft delete

EXPERIENCIA DE USUARIO:

La interfaz se diseñó priorizando usabilidad y claridad:

- Navegación intuitiva mediante barra superior con enlaces a secciones principales
- Formularios con validación en tiempo real y mensajes de error claros
- Diseño responsivo que se adapta a pantallas de diferentes tamaños
- Visualización de imágenes mediante carrusel interactivo
- Indicadores visuales de estado (carga, éxito, error)
- Búsqueda con retroalimentación inmediata
- Paginación con controles claros de navegación
- Paleta de colores profesional y legible
- Iconos intuitivos para acciones comunes

BENEFICIOS OPERATIVOS:

La implementación del SIA genera beneficios tangibles:

- Centralización: Toda la información en un único lugar accesible
- Trazabilidad: Registro completo de consultas y asignaciones
- Eficiencia: Reducción de tiempos en búsqueda y gestión de información
- Control: Supervisión administrativa de actividades de agentes
- Escalabilidad: Capacidad de crecimiento sin limitaciones manuales
- Profesionalismo: Imagen corporativa moderna y tecnológica
- Análisis: Capacidad de generar reportes para decisiones estratégicas
- Seguridad: Protección de información sensible del negocio

El sistema representa una solución completa y profesional para la gestión inmobiliaria, combinando funcionalidad robusta, seguridad adecuada y experiencia de usuario optimizada.


========================================

8. TECNOLOGÍAS UTILIZADAS

El desarrollo del Sistema de Inmuebles y Agentes se realizó utilizando un conjunto de tecnologías modernas, probadas y ampliamente adoptadas en la industria del desarrollo de software. La selección de estas herramientas se fundamentó en criterios de rendimiento, seguridad, escalabilidad, disponibilidad de documentación y soporte comunitario.

8.1. Frontend

REACT 18
React es una biblioteca JavaScript desarrollada por Meta (Facebook) para la construcción de interfaces de usuario basadas en componentes. En el SIA, React constituye el núcleo del frontend, permitiendo:

- Desarrollo basado en componentes reutilizables (InmuebleCard, AgenteItem, Navbar, etc.)
- Gestión eficiente del estado de la aplicación mediante hooks (useState, useEffect)
- Renderizado eficiente mediante Virtual DOM
- Flujo de datos unidireccional que facilita el debugging
- Ecosistema extenso de bibliotecas complementarias
- Actualizaciones reactivas de la interfaz ante cambios de datos

NEXT.JS 14
Next.js es un framework de React desarrollado por Vercel que extiende las capacidades de React agregando funcionalidades empresariales. Se utiliza en el SIA por:

- App Router: Sistema de enrutamiento basado en sistema de archivos que simplifica la navegación
- Renderizado del lado del servidor (SSR) para mejor rendimiento inicial
- API Routes: Permite crear endpoints de backend dentro del mismo proyecto
- Optimización automática de imágenes y recursos
- Soporte nativo para TypeScript
- Sistema de metadata para SEO
- Organización clara mediante route groups
- Hot Module Replacement para desarrollo ágil

TYPESCRIPT 5
TypeScript es un superset de JavaScript que agrega tipado estático opcional. Su uso en el SIA aporta:

- Detección de errores en tiempo de desarrollo antes de ejecutar el código
- Autocompletado inteligente en IDEs
- Definición clara de estructuras de datos mediante interfaces y types
- Mejor documentación implícita del código
- Refactorización segura facilitada por el compilador
- Prevención de errores comunes de JavaScript
- Mejor escalabilidad en proyectos grandes

TAILWIND CSS 3
Tailwind es un framework CSS utility-first que proporciona clases predefinidas para estilizado. Se eligió por:

- Desarrollo rápido mediante clases utilitarias (bg-blue-500, flex, p-4)
- Diseño consistente sin escribir CSS personalizado
- Responsividad fácil mediante prefijos (sm:, md:, lg:)
- Sistema de diseño escalable y mantenible
- Reducción de CSS no utilizado en producción
- Personalización mediante configuración
- Excelente documentación y comunidad

LUCIDE-REACT Y REACT-ICONS
Bibliotecas de íconos que proporcionan componentes React para visualizar íconos. Aportan:

- Íconos vectoriales escalables sin pérdida de calidad
- Facilidad de integración como componentes React
- Consistencia visual en toda la aplicación
- Personalización de tamaño y color mediante props

8.2. Backend

NEXT.JS 14 API ROUTES
Next.js permite crear API endpoints en el mismo proyecto del frontend. El SIA implementa el backend mediante esta funcionalidad:

- Ubicación: Carpeta app/api/ con estructura de archivos que define rutas
- Métodos HTTP: GET, POST, PUT, DELETE implementados según REST
- Handlers tipados con TypeScript para seguridad de tipos
- Integración directa con Prisma para acceso a datos
- Middleware personalizado para autenticación y autorización

NEXTAUTH 5 (BETA)
NextAuth es una solución completa de autenticación para aplicaciones Next.js. Se utiliza para:

- Gestión de sesiones de usuario
- Provider de credenciales (email + contraseña)
- Callbacks personalizados para agregar información a la sesión (rol, employeeId)
- Integración con base de datos para almacenar usuarios
- Manejo seguro de tokens
- Protección de rutas mediante middleware

BCRYPTJS
Biblioteca para hash de contraseñas. Implementada en el SIA para:

- Cifrado de contraseñas mediante algoritmo bcrypt con salt
- Generación de salts aleatorios para cada contraseña
- Verificación segura de contraseñas durante autenticación
- Prevención de ataques de diccionario y rainbow tables
- Configuración de rounds de hash para balance seguridad/rendimiento

ZOD 4
Biblioteca de validación y parsing de datos con inferencia de tipos TypeScript. Se usa para:

- Definición de schemas de validación (inmuebleSchema, agentSchema, etc.)
- Validación de datos recibidos en API endpoints antes de procesarlos
- Generación automática de tipos TypeScript desde schemas
- Mensajes de error descriptivos en caso de validación fallida
- Prevención de datos inválidos o maliciosos

PRISMA ORM
Prisma es un ORM (Object-Relational Mapping) moderno para Node.js y TypeScript. En el SIA gestiona toda la interacción con la base de datos:

- Definición del modelo de datos mediante schema declarativo (schema.prisma)
- Generación automática de cliente tipado para consultas
- Migraciones de base de datos gestionadas
- Queries type-safe que previenen errores en tiempo de compilación
- Protección contra inyección SQL
- Soporte para relaciones complejas entre entidades
- Introspección de base de datos existente
- Seed scripts para datos iniciales

8.3. Base de Datos

POSTGRESQL
PostgreSQL es un sistema gestor de bases de datos relacional de código abierto, robusto y maduro. Se seleccionó por:

- Cumplimiento estricto de estándares SQL
- Soporte completo para integridad referencial
- Tipos de datos avanzados (UUID, JSON, fechas, etc.)
- Índices eficientes para optimización de consultas
- Transacciones ACID confiables
- Escalabilidad para grandes volúmenes de datos
- Amplio soporte en servicios de hosting cloud
- Excelente rendimiento y estabilidad
- Documentación extensa y comunidad activa

ESTRUCTURA DE LA BASE DE DATOS:
El modelo de datos implementado incluye las siguientes tablas principales:

- inmueble: Almacena propiedades con características y ubicación
- persona: Datos personales de individuos
- empleado: Información laboral de empleados
- persona_empleado: Relación many-to-many entre personas y empleados
- usuario: Cuentas de acceso al sistema
- rol_usuario: Roles disponibles (administrador, agente)
- tipo_empleado: Tipos de empleados (agente)
- consulta_cliente: Registros de consultas recibidas
- agente_inmueble: Asignaciones de inmuebles a agentes
- categoria_inmueble: Categorías de propiedades
- estado_inmueble: Estados posibles de inmuebles
- localidad, zona, barrio: Organización geográfica
- imagen_inmueble, imagen_persona: Archivos multimedia

HERRAMIENTAS COMPLEMENTARIAS:

NODE.JS
Entorno de ejecución de JavaScript del lado del servidor. Necesario para ejecutar Next.js y todo el backend.

NPM (NODE PACKAGE MANAGER)
Gestor de paquetes para instalar y administrar dependencias del proyecto.

GIT
Sistema de control de versiones utilizado para rastrear cambios en el código fuente durante el desarrollo.

VISUAL STUDIO CODE (recomendado)
Editor de código con soporte excelente para TypeScript, React y Next.js.

Esta selección tecnológica proporciona una base sólida, moderna y escalable para el Sistema de Inmuebles y Agentes, asegurando mantenibilidad a largo plazo y facilidad de evolución futura.


========================================

9. ARQUITECTURA DEL SISTEMA

9.1. Modelo de Datos

El sistema implementa un modelo de datos relacional normalizado que refleja las entidades del dominio inmobiliario y sus interacciones. La estructura fue diseñada para garantizar integridad referencial, minimizar redundancia y facilitar consultas eficientes.

ENTIDADES PRINCIPALES Y SUS RELACIONES:

PERSONA
Entidad central que representa individuos en el sistema.
Campos: id (UUID), nombre, apellido, dni (único), correo (único), teléfono, dirección, fecha_nacimiento, eliminado
Relaciones:
- Puede asociarse con múltiples empleados (many-to-many via persona_empleado)
- Puede tener múltiples usuarios (one-to-many)
- Puede tener múltiples imágenes de perfil (one-to-many)

EMPLEADO
Representa a empleados de la inmobiliaria.
Campos: id (UUID), cuit (único), fecha_ingreso, fecha_egreso, tipo_id, eliminado
Relaciones:
- Pertenece a un tipo_empleado (many-to-one)
- Se asocia con personas (many-to-many via persona_empleado)
- Puede tener asignados múltiples inmuebles (one-to-many via agente_inmueble)
- Puede registrar múltiples consultas de clientes (one-to-many)

INMUEBLE
Entidad que representa propiedades inmobiliarias.
Campos: id (UUID), categoria_id, localidad_id, zona_id, barrio_id, direccion, dormitorios, baños, superficie, cochera, estado_id, descripcion, eliminado
Relaciones:
- Pertenece a una categoría (many-to-one)
- Pertenece a un estado (many-to-one)
- Ubicado en localidad, zona y barrio (many-to-one cada uno)
- Puede tener asignados múltiples agentes (one-to-many via agente_inmueble)
- Puede tener múltiples imágenes (one-to-many)
- Puede tener múltiples consultas (one-to-many)

USUARIO
Cuentas de acceso al sistema.
Campos: id (UUID), persona_id, rol_id, contrasena (hash), eliminado, correo_verificado, creado_en, actualizado_en
Relaciones:
- Vinculado a una persona (one-to-one efectivo)
- Pertenece a un rol (many-to-one)
- Puede tener múltiples sesiones (one-to-many)

CONSULTA_CLIENTE
Registros de consultas de clientes sobre inmuebles.
Campos: id (UUID), agente_id, inmueble_id, nombre, apellido, telefono, correo, fecha, descripcion
Relaciones:
- Vinculada a un agente/empleado (many-to-one)
- Vinculada a un inmueble (many-to-one)

AGENTE_INMUEBLE
Tabla de asignación entre agentes e inmuebles.
Campos: id (UUID), agente_id, inmueble_id, eliminado
Relaciones:
- Vincula empleado con inmueble (many-to-many)

DATOS MAESTROS:
- categoria_inmueble, estado_inmueble: Clasificaciones de inmuebles
- localidad, zona, barrio: Organización geográfica jerárquica
- tipo_empleado: Tipos de empleados en la organización
- rol_usuario: Roles de acceso al sistema

CARACTERÍSTICAS DEL DISEÑO:

- IDENTIFICADORES: Uso de UUIDs (Universally Unique Identifiers) como claves primarias para facilitar distribución futura y prevenir colisiones
- SOFT DELETE: Todas las entidades principales incluyen campo "eliminado" para preservar integridad histórica
- NORMALIZACIÓN: Separación de conceptos para evitar redundancia (persona separada de empleado)
- INTEGRIDAD REFERENCIAL: Claves foráneas con restricciones ON DELETE/UPDATE apropiadas
- ÍNDICES: Campos de búsqueda frecuente están indexados (DNI, CUIT, correo, categoría_id, estado_id, etc.)
- MAPEO BILINGÜE: Nombres de tabla en español, campos mapeados a inglés en Prisma para convención de código

9.2. Estructura de la Aplicación

El proyecto sigue la estructura estándar de Next.js 14 con App Router:

sia_app/
├── app/                          # Directorio principal de la aplicación
│   ├── (auth)/                   # Grupo de rutas de autenticación
│   │   └── login/                # Página de inicio de sesión
│   ├── (protected)/              # Grupo de rutas protegidas
│   │   ├── agentes/              # Listado y gestión de agentes
│   │   │   ├── [id]/             # Detalle de agente (ruta dinámica)
│   │   │   └── page.tsx
│   │   ├── altaAgente/           # Formulario de creación de agente
│   │   ├── altaInmueble/         # Formulario de creación de inmueble
│   │   ├── inmuebles/            # Listado de inmuebles
│   │   │   ├── [id]/             # Detalle de inmueble
│   │   │   └── page.tsx
│   │   ├── misInmuebles/         # Inmuebles del agente (solo agentes)
│   │   ├── consultasClientes/    # Todas las consultas (admin)
│   │   ├── misConsultasClientes/ # Consultas propias (agentes)
│   │   ├── registrarConsultaCliente/ # Formulario de consulta
│   │   └── admin/                # Administración de datos maestros
│   │       ├── rubros/
│   │       ├── estados/
│   │       ├── localidades/
│   │       ├── zonas/
│   │       └── barrios/
│   ├── api/                      # API Routes (backend)
│   │   ├── agentes/
│   │   │   ├── route.ts          # GET, POST agentes
│   │   │   └── [id]/route.ts     # GET, PUT, DELETE por ID
│   │   ├── inmuebles/
│   │   │   ├── route.ts
│   │   │   └── [id]/route.ts
│   │   ├── consultasClientes/route.ts
│   │   ├── misConsultasClientes/route.ts
│   │   ├── registrarConsultaCliente/route.tsx
│   │   ├── misInmuebles/route.ts
│   │   ├── asignacionAgente/[id]/route.ts
│   │   ├── inmuebleEstados/
│   │   ├── inmuebleRubros/
│   │   ├── localidades/
│   │   ├── zonas/
│   │   ├── barrios/
│   │   └── imagenes/
│   ├── components/               # Componentes React locales
│   │   ├── Navbar/
│   │   ├── InmuebleCard/
│   │   ├── AgenteItem/
│   │   ├── ConsultaClienteItem/
│   │   ├── Pagination/
│   │   └── InmuebleSearch/
│   ├── layout.tsx                # Layout raíz de la aplicación
│   └── page.tsx                  # Página de inicio
├── components/                   # Componentes globales reutilizables
│   ├── InmuebleForm.tsx
│   ├── AdminEntityManager.tsx
│   └── ImageCarrusel.tsx
├── lib/                          # Utilidades y helpers
│   ├── prisma.ts                 # Cliente Prisma singleton
│   ├── api-helpers.ts            # Helpers de API (requireAuth, jsonSuccess, etc.)
│   ├── validation.ts             # Schemas Zod de validación
│   ├── db.ts                     # Helpers de queries Prisma
│   ├── type-utils.ts             # Utilidades de tipos
│   ├── response-types.ts         # Tipos de respuestas API
│   ├── csv-export.ts             # Utilidades de exportación CSV
│   └── password.ts               # Generación de contraseñas
├── types/                        # Definiciones de tipos TypeScript
│   ├── inmueble.ts
│   ├── empleado.ts
│   ├── persona.ts
│   └── consulta_cliente.ts
├── prisma/                       # Configuración de Prisma
│   ├── schema.prisma             # Definición del modelo de datos
│   ├── migrations/               # Historial de migraciones
│   └── seed.ts                   # Script de datos iniciales
├── actions/                      # Server Actions
│   └── auth-actions.ts           # Acciones de autenticación
├── public/                       # Archivos estáticos públicos
│   └── img/                      # Imágenes de inmuebles y perfiles
├── auth.config.ts                # Configuración de NextAuth
├── middleware.ts                 # Middleware de Next.js
├── CLAUDE.md                     # Documentación para desarrollo
├── package.json                  # Dependencias del proyecto
├── tsconfig.json                 # Configuración TypeScript
├── next.config.js                # Configuración Next.js
└── tailwind.config.ts            # Configuración Tailwind CSS

CONVENCIONES DE ORGANIZACIÓN:

- Route Groups: Uso de paréntesis (auth), (protected) para organizar rutas sin afectar URLs
- Colocation: Componentes específicos de página junto a la página que los usa
- Separación de concerns: Componentes, lógica de negocio, tipos y utilidades en carpetas dedicadas
- API Structure: Un archivo route.ts por ruta API, organizados jerárquicamente
- Naming: Nombres descriptivos en español para entidades de negocio, inglés para conceptos técnicos

9.3. Sistema de Autenticación

FLUJO DE AUTENTICACIÓN:

1. Usuario accede a /login
2. Ingresa correo y contraseña
3. Sistema valida credenciales contra base de datos
4. Si válidas, NextAuth genera sesión con JWT
5. Se agrega información customizada a la sesión (role, empleadoId)
6. Usuario redirigido a página principal con sesión activa
7. Cada request incluye token de sesión en cookies
8. Middleware y API endpoints validan sesión antes de permitir acceso

COMPONENTES DEL SISTEMA:

- auth.config.ts: Configuración de providers, callbacks, páginas
- actions/auth-actions.ts: Server actions para login, logout, getSession
- middleware.ts: Protección de rutas (actualmente comentado)
- lib/api-helpers.ts: requireAuth() para validar sesión en APIs

ALMACENAMIENTO DE SESIONES:

Las sesiones se almacenan en cookies HTTP-only seguras gestionadas por NextAuth. La información de sesión incluye:
- user.email: Correo del usuario
- user.name: Nombre completo
- user.role: Rol (administrador/agente)
- user.empleadoId: ID del empleado si es agente

CONTROL DE ACCESO:

Cada endpoint API utiliza requireAuth() que:
1. Verifica existencia de sesión válida
2. Opcionalmente valida rol requerido
3. Retorna sesión si autorizado, error si no

Ejemplo:
const { session, error, status } = await requireAuth(request, "administrador");
if (error) return jsonError(error, status);


========================================

10. ROLES DE USUARIO

El sistema implementa un modelo de control de acceso basado en roles (RBAC - Role-Based Access Control) que diferencia las capacidades de los usuarios según su función dentro de la organización inmobiliaria.

10.1. Tipos de Usuario

El SIA contempla dos roles principales:

ADMINISTRADOR
Rol con permisos completos sobre el sistema. Los usuarios con este rol tienen responsabilidades de gestión y supervisión de toda la operación inmobiliaria. Típicamente asignado a:
- Gerentes o propietarios de la inmobiliaria
- Personal administrativo senior
- Supervisores de agentes
- Personal del área de sistemas

Características:
- Control total sobre inmuebles, agentes y consultas
- Capacidad de crear y eliminar registros
- Acceso a reportes y estadísticas globales
- Gestión de datos maestros del sistema
- Visualización de actividad de todos los agentes

AGENTE
Rol con permisos limitados enfocados en operación diaria. Los usuarios con este rol son agentes inmobiliarios que interactúan con clientes y gestionan propiedades asignadas. Asignado a:
- Agentes inmobiliarios de campo
- Vendedores de propiedades
- Personal de atención al cliente

Características:
- Acceso de solo lectura al catálogo general de inmuebles
- Gestión completa de sus inmuebles asignados
- Capacidad de registrar consultas de clientes
- Visualización únicamente de sus propias consultas
- Sin permisos para crear/eliminar inmuebles ni agentes

SUPER USUARIO (Contemplado pero no implementado)
El diseño inicial contemplaba un tercer rol de "Super Usuario" con permisos especiales para:
- Gestión de usuarios y roles
- Configuración del sistema
- Acceso a logs y auditoría
- Respaldos y mantenimiento

Este rol no fue implementado en la versión actual ya que las funciones administrativas son suficientes para el alcance del proyecto.

10.2. Secciones del Sistema

El sistema se organiza en diferentes secciones con URLs específicas:

SECCIONES PÚBLICAS (Sin autenticación):
- /login: Página de inicio de sesión

SECCIONES COMPARTIDAS (Requieren autenticación, accesibles para ambos roles):
- /: Página principal/dashboard
- /inmuebles: Listado completo de inmuebles (solo visualización)
- /inmuebles/[id]: Detalle de inmueble individual

SECCIONES EXCLUSIVAS DE ADMINISTRADOR:
- /agentes: Listado de todos los agentes registrados
- /agentes/[id]: Detalle y edición de agente
- /altaAgente: Formulario de creación de nuevo agente
- /altaInmueble: Formulario de creación de nuevo inmueble
- /consultasClientes: Todas las consultas del sistema
- /admin/rubros: Gestión de categorías de inmuebles
- /admin/estados: Gestión de estados de inmuebles
- /admin/localidades: Gestión de localidades
- /admin/zonas: Gestión de zonas
- /admin/barrios: Gestión de barrios

SECCIONES EXCLUSIVAS DE AGENTE:
- /misInmuebles: Inmuebles asignados al agente
- /misConsultasClientes: Consultas registradas por el agente
- /registrarConsultaCliente: Formulario para registrar nueva consulta

10.3. Permisos por Rol

MATRIZ DE PERMISOS DETALLADA:

GESTIÓN DE INMUEBLES:
Operación                          | Administrador | Agente
-----------------------------------|---------------|--------
Ver listado de inmuebles           | ✓             | ✓
Ver detalle de inmueble            | ✓             | ✓
Crear inmueble                     | ✓             | ✗
Editar inmueble                    | ✓             | ✗
Eliminar inmueble                  | ✓             | ✗
Asignar inmueble a agente          | ✓             | ✗
Ver mis inmuebles asignados        | N/A           | ✓
Buscar/filtrar inmuebles           | ✓             | ✓
Exportar listado de inmuebles      | ✓             | ✗

GESTIÓN DE AGENTES:
Operación                          | Administrador | Agente
-----------------------------------|---------------|--------
Ver listado de agentes             | ✓             | ✗
Ver detalle de agente              | ✓             | ✗
Crear agente                       | ✓             | ✗
Editar agente                      | ✓             | ✗
Eliminar agente                    | ✓             | ✗
Exportar listado de agentes        | ✓             | ✗

GESTIÓN DE CONSULTAS:
Operación                          | Administrador | Agente
-----------------------------------|---------------|--------
Ver todas las consultas            | ✓             | ✗
Ver mis consultas                  | N/A           | ✓
Registrar consulta                 | ✓             | ✓ (solo inmuebles asignados)
Exportar consultas                 | ✓             | ✗

GESTIÓN DE DATOS MAESTROS:
Operación                          | Administrador | Agente
-----------------------------------|---------------|--------
Crear categoría/estado             | ✓             | ✗
Editar categoría/estado            | ✓             | ✗
Eliminar categoría/estado          | ✓             | ✗
Crear localidad/zona/barrio        | ✓             | ✗
Editar localidad/zona/barrio       | ✓             | ✗
Eliminar localidad/zona/barrio     | ✓             | ✗

IMPLEMENTACIÓN TÉCNICA DE PERMISOS:

Los permisos se implementan en dos niveles:

1. NIVEL DE INTERFAZ (Frontend):
- Ocultamiento de elementos UI según rol
- Ejemplo: Botón "Alta Inmueble" solo visible para administradores
- Verificación de session.user.role en componentes React

2. NIVEL DE API (Backend):
- Validación obligatoria en cada endpoint
- Uso de requireAuth(request, roleRequired)
- Retorno de error 403 Forbidden si rol insuficiente

Ejemplo de implementación:
```typescript
// Endpoint solo para administradores
export async function POST(request: NextRequest) {
  const { error, status } = await requireAuth(request, "administrador");
  if (error) return NextResponse.json({ error }, { status });
  // ... lógica del endpoint
}
```

Esta arquitectura de doble validación asegura que incluso si un usuario malicioso manipula el frontend, el backend rechazará operaciones no autorizadas.


========================================

11. FUNCIONALIDADES IMPLEMENTADAS

El sistema SIA incluye un conjunto completo de funcionalidades operativas que cubren todas las necesidades identificadas en los requerimientos. A continuación se describen en detalle las capacidades implementadas.

11.1. Gestión de Inmuebles

CREACIÓN DE INMUEBLES:
Los administradores pueden registrar nuevas propiedades mediante un formulario completo que captura:
- Categoría: Selección desde lista (Casa, Departamento, Terreno, Local, etc.)
- Ubicación: Localidad, Zona y Barrio mediante selectores dependientes
- Dirección: Calle y número exactos
- Características: Dormitorios, baños, superficie en metros cuadrados
- Comodidades: Checkbox para cochera
- Estado: Disponible, Reservado, Vendido, Alquilado, etc.
- Descripción: Campo de texto libre para detalles adicionales
- Imágenes: Carga múltiple de fotografías

El formulario implementa validación en tiempo real con Zod, indicando errores específicos para cada campo. Las imágenes se convierten de Base64 a archivos y se almacenan en el servidor con nombres únicos. La primera imagen se marca automáticamente como principal.

VISUALIZACIÓN DE INMUEBLES:
Todos los usuarios autenticados pueden acceder al catálogo completo mediante:
- Vista de galería con cards mostrando imagen principal, dirección y datos básicos
- Paginación de 5 elementos por página
- Clic en card para acceder a vista detallada

La vista detallada muestra:
- Carrusel de imágenes navegable
- Todos los datos de la propiedad organizados en secciones
- Ubicación completa (localidad, zona, barrio)
- Estado actual claramente visible
- Botones de acción según rol del usuario

EDICIÓN Y ELIMINACIÓN:
Los administradores pueden:
- Modificar cualquier campo de un inmueble existente
- Agregar o eliminar imágenes
- Cambiar estado de la propiedad
- Marcar inmueble como eliminado (soft delete)

La eliminación lógica preserva el registro en base de datos pero lo excluye de los listados, manteniendo integridad de consultas históricas.

BÚSQUEDA Y FILTRADO:
Campo de búsqueda en tiempo real que filtra por:
- Dirección (coincidencia parcial)
- Nombre de barrio
- Nombre de zona
- Nombre de localidad
- Categoría del inmueble

Los resultados se actualizan instantáneamente mientras el usuario escribe.

11.2. Gestión de Agentes

ALTA DE AGENTES:
Los administradores registran nuevos agentes mediante formulario que captura:
- Datos personales: Nombre, apellido, DNI, fecha de nacimiento
- Datos de contacto: Correo electrónico, teléfono, dirección física
- Datos laborales: CUIT, fecha de ingreso (fecha actual por defecto)
- Fotografía de perfil (opcional)

El sistema ejecuta automáticamente:
- Creación de registro de persona
- Creación de registro de empleado tipo "agente"
- Vinculación persona-empleado
- Generación de contraseña temporal aleatoria de 12 caracteres
- Creación de cuenta de usuario con rol "agente"
- Encriptación de contraseña con bcrypt

La respuesta incluye la contraseña temporal que el administrador debe comunicar al agente de forma segura.

LISTADO DE AGENTES:
Vista tabular accesible solo para administradores mostrando:
- Fotografía de perfil
- ID de empleado
- Nombre completo
- CUIT
- Fecha de alta
- Fecha de baja (si aplica)
- Teléfono
- Estado (Activo/Inactivo)
- Botón de acceso a detalle

DETALLE Y EDICIÓN DE AGENTES:
Vista completa de información del agente con capacidad de editar:
- Datos personales
- Datos laborales
- Fotografía de perfil
- Fecha de egreso para marcar inactivación

EXPORTACIÓN:
Botón "Exportar CSV" genera archivo descargable con todos los agentes incluyendo:
ID, Nombre, Apellido, DNI, CUIT, Correo, Teléfono, Fecha de Alta, Fecha de Baja, Estado

11.3. Gestión de Consultas de Clientes

REGISTRO DE CONSULTAS (por agentes):
Los agentes pueden documentar consultas recibidas de clientes:
1. Seleccionan inmueble de interés desde listado de sus inmuebles asignados
2. Ingresan datos del cliente: nombre, apellido, teléfono, correo
3. Agregan descripción de la consulta o comentarios
4. Guardan registro

El sistema valida automáticamente que el agente tenga asignado ese inmueble. La fecha se registra automáticamente. El agente queda vinculado a la consulta.

VIS UALIZACIÓN DE CONSULTAS:
- ADMINISTRADORES: Ven tabla con todas las consultas del sistema, mostrando nombre del cliente, teléfono, email, fecha, descripción, ID de inmueble e ID de agente responsable. Ordenadas por fecha descendente.

- AGENTES: Ven únicamente sus propias consultas registradas, con los mismos campos excepto ID de agente (ya que todas son suyas).

EXPORTACIÓN DE CONSULTAS:
Botón disponible para administradores que genera CSV con todas las consultas incluyendo:
Nombre, Apellido, Teléfono, Email, Fecha, Descripción, ID Inmueble, ID Agente

11.4. Asignación de Inmuebles a Agentes

PROCESO DE ASIGNACIÓN:
Los administradores pueden asignar propiedades a agentes responsables mediante:
1. Acceso a detalle del inmueble
2. Selección de agente desde listado
3. Confirmación de asignación

El sistema ejecuta:
- Verificación de existencia de inmueble y agente
- Eliminación lógica de asignación anterior (si existe)
- Creación de nueva asignación activa

VISUALIZACIÓN DE INMUEBLES ASIGNADOS:
Los agentes acceden a sección "Mis Inmuebles" que muestra:
- Solo inmuebles asignados específicamente a ellos
- Vista similar al catálogo general pero filtrada
- Acceso completo a detalles de cada propiedad
- Capacidad de registrar consultas sobre estos inmuebles

11.5. Generación de Informes

EXPORTACIÓN DE INMUEBLES:
Los administradores pueden exportar el catálogo completo de inmuebles a CSV con columnas:
ID, Dirección, Categoría, Localidad, Zona, Barrio, Dormitorios, Baños, Superficie, Cochera, Estado

EXPORTACIÓN DE AGENTES:
CSV con datos completos de todos los agentes:
ID, Nombre, Apellido, DNI, CUIT, Correo, Teléfono, Fecha de Alta, Fecha de Baja, Estado

EXPORTACIÓN DE CONSULTAS:
CSV con historial completo de consultas:
Nombre, Apellido, Teléfono, Email, Fecha, Descripción, ID Inmueble, ID Agente

CARACTERÍSTICAS TÉCNICAS DE EXPORTACIÓN:
- Formato CSV compatible con Excel y Google Sheets
- Codificación UTF-8 para soportar caracteres especiales
- Escapado automático de comillas y comas en valores
- Nombre de archivo descriptivo
- Generación y descarga inmediata en navegador
- Sin almacenamiento temporal en servidor

GESTIÓN DE DATOS MAESTROS:

El sistema incluye interfaces administrativas completas para gestionar entidades de clasificación:

CATEGORÍAS DE INMUEBLES:
CRUD completo para tipos de propiedad (Casa, Departamento, Terreno, Local Comercial, Galpón, etc.)

ESTADOS DE INMUEBLES:
Gestión de estados posibles (Disponible, Reservado, Vendido, Alquilado, En Trámite, etc.)

LOCALIDADES, ZONAS Y BARRIOS:
Administración de la estructura geográfica de organización territorial.

Todas estas interfaces permiten:
- Crear nuevo elemento
- Listar todos los elementos
- Editar elemento existente
- Eliminar elemento (con validación de que no esté en uso)


========================================

12. SEGURIDAD

La seguridad constituye un pilar fundamental del Sistema de Inmuebles y Agentes. Se implementaron múltiples capas y mecanismos de protección para garantizar la confidencialidad, integridad y disponibilidad de la información empresarial.

12.1. Autenticación y Autorización

AUTENTICACIÓN:
El sistema requiere autenticación obligatoria para acceder a cualquier funcionalidad. Se implementa mediante NextAuth con las siguientes características:

- Credentials Provider: Autenticación basada en correo electrónico y contraseña almacenados en base de datos propia
- Validación de credenciales: Búsqueda de usuario por correo y verificación de contraseña mediante bcrypt
- Sesiones seguras: Tokens JWT almacenados en cookies HTTP-only que previenen acceso desde JavaScript malicioso
- Timeout de sesión: Sesiones con tiempo de vida limitado que requieren re-autenticación periódica
- Callbacks personalizados: Enriquecimiento de sesión con datos adicionales (rol, empleadoId)

FLUJO DE AUTENTICACIÓN:
1. Usuario sin sesión es redirigido automáticamente a /login
2. Ingresa correo y contraseña
3. Sistema valida contra tabla usuario en base de datos
4. Si válido, genera token JWT y establece cookie de sesión
5. Usuario accede a sistema con sesión activa
6. Cada request incluye token que se valida en servidor

AUTORIZACIÓN:
Control de acceso basado en roles implementado en dos niveles:

NIVEL FRONTEND:
- Verificación de session.user.role en componentes React
- Ocultamiento de botones y enlaces según permisos
- Redirección si usuario intenta acceder a ruta no permitida
- Mensajes de "No autorizado" para intentos de acceso indebido

NIVEL BACKEND:
- Función requireAuth(request, roleRequired) en cada endpoint sensible
- Validación de sesión válida y rol apropiado antes de ejecutar lógica
- Retorno de códigos HTTP apropiados:
  * 401 Unauthorized: No autenticado (sin sesión válida)
  * 403 Forbidden: Autenticado pero sin permisos suficientes
- Logs de intentos de acceso no autorizado

MATRIZ DE CONTROL DE ACCESO:
Cada endpoint API tiene configurado explícitamente qué roles pueden acceder:
- Endpoints públicos: Ninguno (todos requieren autenticación)
- Endpoints de administrador: Creación/edición/eliminación de inmuebles y agentes, gestión de datos maestros, visualización de todas las consultas
- Endpoints de agente: Registro de consultas, visualización de inmuebles asignados, visualización de consultas propias
- Endpoints compartidos: Visualización de catálogo de inmuebles

12.2. Protección de Datos

ALMACENAMIENTO SEGURO DE CONTRASEÑAS:
Las contraseñas nunca se almacenan en texto plano. Se implementa:

- Algoritmo bcrypt: Hash unidireccional con salt incorporado
- Salt aleatorio: Cada contraseña tiene salt único generado automáticamente
- Factor de trabajo: 10 rounds de bcrypt para balance seguridad/rendimiento
- Verificación: Comparación mediante bcrypt.compare() que maneja salt automáticamente
- Imposibilidad de recuperación: No existe forma de obtener la contraseña original del hash

GENERACIÓN DE CONTRASEÑAS TEMPORALES:
Al crear nuevos agentes, el sistema genera contraseñas temporales robustas:

- Longitud: 12 caracteres
- Composición obligatoria:
  * Al menos 1 letra mayúscula
  * Al menos 1 letra minúscula
  * Al menos 1 dígito numérico
  * Al menos 1 símbolo especial (!@#$%&*)
- Generación aleatoria criptográficamente segura
- Mezclado aleatorio de caracteres
- Entropía suficiente para resistir ataques de fuerza bruta

Ejemplo de contraseña generada: K9m&Tj2@xLpW

La contraseña se retorna al administrador una sola vez en la respuesta de creación, con advertencia de comunicarla de forma segura al agente.

VALIDACIÓN DE ENTRADA:
Todos los datos ingresados por usuarios se validan exhaustivamente:

- Validación de tipos: TypeScript valida tipos en tiempo de compilación
- Validación de formato: Esquemas Zod verifican estructura de datos
- Validación de rango: Números dentro de límites esperados
- Validación de unicidad: DNI, CUIT y correos únicos en base de datos
- Sanitización: Prisma escapa automáticamente valores para prevenir inyección SQL
- Validación en frontend Y backend: Doble capa para prevenir bypass

PROTECCIÓN CONTRA INYECCIÓN SQL:
- Uso exclusivo de Prisma ORM que genera queries parametrizadas
- Nunca se concatenan strings para construir SQL
- Todas las consultas son type-safe
- Validación de tipos en tiempo de compilación

PROTECCIÓN CONTRA XSS (Cross-Site Scripting):
- React escapa automáticamente contenido renderizado
- Validación de entrada de datos textuales
- No se usa dangerouslySetInnerHTML excepto donde absolutamente necesario

SOFT DELETE PARA PROTECCIÓN DE DATOS:
- Eliminación lógica en lugar de física preserva información histórica
- Campo "eliminado" booleano en todas las entidades principales
- Queries automáticamente filtran registros eliminados
- Posibilidad de recuperación de datos eliminados accidentalmente
- Cumplimiento de requisitos de auditoría y trazabilidad

12.3. Contraseñas y Encriptación

REQUISITOS DE CONTRASEÑAS:
Aunque el sistema genera contraseñas temporales, se establecen las siguientes políticas:

- Longitud mínima: 8 caracteres (generadas son de 12)
- Complejidad: Combinación de mayúsculas, minúsculas, números y símbolos
- No reutilización: Contraseñas temporales únicas para cada agente
- Cambio obligatorio: Se recomienda cambiar contraseña temporal en primer login (funcionalidad futura)

ALMACENAMIENTO DE HASHES:
La tabla usuario almacena en campo "contrasena":
- Hash bcrypt de la contraseña
- Formato: $2a$10$salthashcombinado (60 caracteres)
- Algoritmo: bcrypt con 10 rounds
- Resistencia: Prácticamente imposible de revertir con tecnología actual

PROCESO DE VERIFICACIÓN DE CONTRASEÑA:
```
1. Usuario ingresa contraseña en login
2. Sistema busca usuario por correo
3. Obtiene hash almacenado de base de datos
4. Ejecuta bcrypt.compare(contraseñaIngresada, hashAlmacenado)
5. bcrypt extrae salt del hash y computa nuevo hash con contraseña ingresada
6. Compara hashes en tiempo constante para prevenir timing attacks
7. Retorna true si coinciden, false si no
```

SEGURIDAD DE SESIONES:
- Tokens JWT firmados criptográficamente
- Secret key para firma almacenada en variables de entorno
- Cookies con flags:
  * HttpOnly: JavaScript no puede acceder
  * Secure: Solo transmisión via HTTPS (en producción)
  * SameSite: Protección contra CSRF
- Expiración automática de tokens
- Invalidación de sesión al logout

TRANSMISIÓN SEGURA:
En ambiente de producción se recomienda:
- Uso obligatorio de HTTPS/TLS para todas las comunicaciones
- Certificados SSL válidos
- Redirección automática de HTTP a HTTPS
- Headers de seguridad (HSTS, CSP, X-Frame-Options)

CONSIDERACIONES ADICIONALES:

PROTECCIÓN DE DATOS PERSONALES:
Aunque no se implementó encriptación de datos sensibles en base de datos (DNI, CUIT), se recomienda para cumplimiento de regulaciones:
- Encriptación at-rest de datos sensibles
- Encriptación de campos específicos antes de almacenar
- Keys de encriptación gestionadas externamente

LOGS Y AUDITORÍA:
El sistema implementa logging básico:
- Errores de servidor loggeados en consola
- Intentos de acceso no autorizado registrados
- Información de errores técnicos para debugging
- No se loggean contraseñas ni tokens

RECOMENDACIONES PARA PRODUCCIÓN:
- Implementar rate limiting en endpoints de autenticación
- Agregar CAPTCHA para prevenir bots
- Implementar autenticación de dos factores (2FA)
- Registrar logs de auditoría en sistema externo
- Implementar alertas de actividad sospechosa
- Realizar pentesting periódico
- Mantener dependencias actualizadas para patches de seguridad

La combinación de estos mecanismos proporciona un nivel de seguridad adecuado para un sistema empresarial, protegiendo tanto la información de la empresa como los datos personales de empleados y clientes.


========================================

13. CONCLUSIONES

El desarrollo del Sistema de Inmuebles y Agentes (SIA) representa la culminación exitosa de un proyecto integral de ingeniería de software que abordó una problemática real del sector inmobiliario mediante la aplicación de tecnologías modernas y mejores prácticas de desarrollo.

CUMPLIMIENTO DE OBJETIVOS:

El proyecto alcanzó satisfactoriamente todos los objetivos planteados inicialmente:

- Se diseñó e implementó un modelo de datos robusto y normalizado que centraliza la información de propiedades, agentes y consultas de clientes de manera estructurada y eficiente.

- Se desarrollaron módulos funcionales completos para la gestión de inmuebles (CRUD completo con imágenes), gestión de agentes inmobiliarios (alta, consulta, modificación) y registro de consultas de clientes con trazabilidad completa.

- Se implementó un sistema de autenticación y autorización basado en roles que diferencia apropiadamente entre administradores y agentes, controlando el acceso a funcionalidades según permisos.

- Se crearon capacidades de asignación de inmuebles a agentes responsables, facilitando la distribución de cartera y el seguimiento de responsabilidades.

- Se incorporaron herramientas de generación de reportes mediante exportación a CSV, permitiendo análisis externo de datos.

- Se aplicaron medidas de seguridad robustas incluyendo encriptación de contraseñas, generación de contraseñas temporales seguras, validación exhaustiva de datos y protección contra vulnerabilidades comunes.

- Se diseñó una interfaz de usuario intuitiva, responsiva y moderna que facilita la adopción por parte de usuarios sin conocimientos técnicos avanzados.

- Se garantizó escalabilidad mediante arquitectura modular y documentación adecuada que facilita evolución futura del sistema.

LOGROS TÉCNICOS:

Desde la perspectiva técnica, el proyecto demostró competencia en múltiples áreas del desarrollo de software:

- Arquitectura de tres capas bien definidas con separación clara de responsabilidades
- Implementación de API RESTful siguiendo convenciones estándares
- Uso efectivo de ORM (Prisma) para abstracción de base de datos
- Aplicación de TypeScript para tipado estático y reducción de errores
- Implementación de validación de datos en múltiples niveles
- Manejo apropiado de estado en aplicaciones React
- Gestión de archivos multimedia (imágenes)
- Implementación de paginación para rendimiento
- Búsqueda y filtrado en tiempo real
- Integración de múltiples tecnologías en un stack coherente

VALOR GENERADO:

El SIA aporta valor tangible a empresas inmobiliarias:

- OPERATIVO: Centralización de información, reducción de tiempos de búsqueda, automatización de registros, trazabilidad de operaciones
- ESTRATÉGICO: Capacidad de análisis mediante reportes, visibilidad de actividades, mejor control de gestión
- COMPETITIVO: Profesionalización del servicio, imagen moderna, independencia tecnológica
- ECONÓMICO: Reducción de costos operativos, prevención de pérdidas de oportunidades, optimización de recursos

APRENDIZAJES Y EXPERIENCIA:

El desarrollo del proyecto proporcionó experiencia práctica valiosa:

- Análisis de requerimientos de un problema real de negocio
- Diseño de soluciones tecnológicas apropiadas al contexto
- Toma de decisiones técnicas fundamentadas
- Gestión de complejidad en sistemas de información
- Aplicación de metodologías de desarrollo
- Documentación técnica profesional
- Resolución de problemas técnicos durante implementación
- Trabajo en contexto de proyecto de software completo

LIMITACIONES Y TRABAJO FUTURO:

Si bien el sistema cumple con los requerimientos establecidos, se identifican oportunidades de mejora y expansión:

FUNCIONALIDADES FUTURAS:
- Módulo de contratos y documentación legal
- Sistema de calendario y agendamiento de visitas
- Chat interno entre usuarios
- Dashboard con métricas, gráficos y KPIs
- Notificaciones automáticas por email o SMS
- Integración con portales inmobiliarios (Mercado Libre, Properati, etc.)
- Módulo de finanzas para gestión de comisiones
- Sistema de tareas y recordatorios para agentes
- Galería pública de propiedades para sitio web
- Panel de control de rendimiento por agente

MEJORAS TÉCNICAS:
- Implementación de autenticación de dos factores (2FA)
- Sistema de recuperación de contraseña vía email
- Cambio obligatorio de contraseña temporal en primer login
- Encriptación de datos sensibles en base de datos
- Implementación de cache para mejorar rendimiento
- Optimización de queries de base de datos
- Tests automatizados (unitarios, integración, e2e)
- Logging estructurado y sistema de monitoreo
- Rate limiting y protección contra abusos
- Implementación de WebSockets para actualizaciones en tiempo real

DESPLIEGUE EN PRODUCCIÓN:
- Configuración de servidor web (Nginx/Apache)
- Implementación de HTTPS con certificados SSL
- Configuración de base de datos en servidor dedicado
- Estrategia de respaldos automáticos
- Configuración de dominio personalizado
- Optimización de rendimiento en producción
- Monitoreo de uptime y rendimiento

REFLEXIÓN ACADÉMICA:

Este proyecto demostró la aplicabilidad directa de los conocimientos adquiridos durante la Tecnicatura en Desarrollo de Software. Se integraron conceptos de:

- Programación (algoritmos, estructuras de datos, lógica)
- Bases de datos (modelado, normalización, SQL)
- Ingeniería de software (análisis, diseño, arquitectura)
- Desarrollo web (frontend, backend, APIs)
- Seguridad informática (autenticación, encriptación, validación)
- Gestión de proyectos (planificación, documentación, control)

La experiencia de diseñar, implementar y documentar un sistema completo desde cero proporciona una preparación invaluable para el ejercicio profesional de la ingeniería de software.

IMPACTO ESPERADO:

Se espera que el SIA, una vez desplegado en un ambiente productivo real, genere impacto positivo en la operación de empresas inmobiliarias mediante:

- Reducción de tiempos administrativos en un 40-50%
- Mejora en tasa de conversión de consultas a operaciones cerradas gracias a mejor seguimiento
- Reducción de errores operativos por centralización y validación de datos
- Mejora en satisfacción de clientes por tiempos de respuesta más ágiles
- Incremento en capacidad de gestión sin necesidad de aumentar personal
- Mejora en toma de decisiones estratégicas basadas en datos concretos

PALABRAS FINALES:

El Sistema de Inmuebles y Agentes representa más que un proyecto académico; es una solución funcional, práctica y valiosa para un sector económico importante. Demuestra que el desarrollo de software, aplicado con metodología, conocimiento técnico y enfoque en necesidades reales, puede generar herramientas que transformen la operación de organizaciones y mejoren la eficiencia empresarial.

Este proyecto sienta las bases para futuras iteraciones que pueden expandir significativamente sus capacidades, pero en su estado actual ya constituye un sistema completo, funcional y útil que aporta valor tangible a sus usuarios.

El conocimiento adquirido y la experiencia práctica obtenida durante este desarrollo constituyen activos fundamentales para el crecimiento profesional de los integrantes del equipo en el campo de la ingeniería de software.

========================================

FIN DEL DOCUMENTO

Documento generado para el proyecto SIA - Sistema de Inmuebles y Agentes
Tecnicatura Superior en Desarrollo de Software
Escuela Normal y Superior de Comercio Nº 46 Domingo Guzmán Silva
Año 2025
