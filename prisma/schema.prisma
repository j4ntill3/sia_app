generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model propiedad {
  id                 String               @id @default(uuid()) @db.Uuid
  titulo             String               @map("title")
  categoria_id       String               @db.Uuid @map("categoryId")
  localidad_id       String               @db.Uuid @map("localidadId")
  zona_id            String               @db.Uuid @map("zonaId")
  direccion          String               @map("address")
  barrio             String               @map("neighborhood")
  dormitorios        Int                  @map("numBedrooms")
  banos              Int                  @map("numBathrooms")
  superficie         Float                @map("surface")
  cochera            Boolean              @map("garage")
  eliminado          Boolean?             @default(false) @map("deleted")
  estado_id          String               @db.Uuid @map("statusId")
  consultas_clientes consulta_cliente[]
  categoria          categoria_propiedad   @relation(fields: [categoria_id], references: [id], onDelete: Cascade)
  estado             estado_propiedad      @relation(fields: [estado_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  agentes            agente_propiedad[]
  imagenes           imagen_propiedad[]
  localidad          localidad            @relation(fields: [localidad_id], references: [id], onDelete: NoAction)
  zona               zona                 @relation(fields: [zona_id], references: [id], onDelete: NoAction)

  @@index([estado_id])
  @@index([categoria_id])
  @@index([localidad_id])
  @@index([zona_id])
  @@map("propiedades")
}
model localidad {
  id        String      @id @default(uuid()) @db.Uuid
  nombre    String
  propiedades  propiedad[]
  @@map("localidad")
}

model zona {
  id        String      @id @default(uuid()) @db.Uuid
  nombre    String
  propiedades  propiedad[]
  @@map("zona")
}

model persona {
  id               String             @id @default(uuid()) @db.Uuid
  telefono         String?
  apellido         String
  direccion        String?
  correo           String             @unique
  creado_en        DateTime           @default(now())
  nombre           String
  dni              Int?               @unique
  eliminado        Boolean
  empleados        persona_empleado[]
  usuarios         usuario[]
  imagenes         imagen_persona[]
}

model session {
  id         String   @id @default(uuid()) @db.Uuid
  usuario_id     String   @db.Uuid
  token      String
  creado_en  DateTime @default(now())
  eliminado    Boolean
  usuario       usuario     @relation(fields: [usuario_id], references: [id])

  @@index([usuario_id])
}

model usuario {
  id            String      @id @default(uuid()) @db.Uuid
  rol_id        String      @db.Uuid
  contrasena    String
  persona_id    String      @db.Uuid
  eliminado     Boolean
  correo_verificado DateTime?   @db.Timestamp
  creado_en     DateTime?   @default(now()) @db.Timestamp
  actualizado_en DateTime?   @default(now()) @db.Timestamp
  cuenta       account?
  sesiones       session[]
  persona        persona      @relation(fields: [persona_id], references: [id])
  rol_usuario      rol_usuario    @relation(fields: [rol_id], references: [id])

  @@index([persona_id])
  @@index([rol_id])

  @@map("usuario")
}

model empleado {
  id                 String             @id @default(uuid()) @db.Uuid
  cuit               String             @unique
  fecha_ingreso      DateTime           @db.Date @map("hireDate")
  fecha_egreso       DateTime?          @db.Date @map("terminationDate")
  tipo_id            String             @db.Uuid @map("typeId")
  eliminado          Boolean            @map("deleted")
  consultas_clientes consulta_cliente[]
  tipo               tipo_empleado       @relation(fields: [tipo_id], references: [id])
  propiedades_agente agente_propiedad[]
  personas_empleado  persona_empleado[]
  @@index([tipo_id])
  @@map("empleados")
}

model tipo_empleado {
  id       String     @id @default(uuid()) @db.Uuid
  tipo     String     @unique @map("type")
  empleados empleado[]
  @@map("tipos_empleados")
}

model persona_empleado {
  id             String   @id @default(uuid()) @db.Uuid
  persona_id     String   @db.Uuid @map("personId")
  empleado_id    String   @db.Uuid @map("employeeId")
  creado_en      DateTime @default(now()) @db.Timestamp @map("createdAt")
  eliminado      Boolean  @default(false) @map("deleted")
  empleado       empleado @relation(fields: [empleado_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  persona        persona  @relation(fields: [persona_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index([empleado_id])
  @@index([persona_id])
  @@map("personas_empleados")
}

model rol_usuario {
  id        String    @id @default(uuid()) @db.Uuid
  tipo_rol  String
  eliminado   Boolean
  usuarios      usuario[]
}

model estado_propiedad {
  id       String    @id @default(uuid()) @db.Uuid
  estado   String
  propiedades propiedad[]
  @@map("estados_propiedades")
}
model categoria_propiedad {
  id       String    @id @default(uuid()) @db.Uuid
  categoria String
  propiedades propiedad[]
  @@map("categorias_propiedades")
}

model imagen_propiedad {
  id          String    @id @default(uuid()) @db.Uuid
  propiedad_id  String    @db.Uuid @map("propertyId")
  imagen        String?   @map("imagePath")
  propiedad     propiedad @relation(fields: [propiedad_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@index([propiedad_id])
  @@map("imagenes_propiedades")
}

model oauth_access_tokens {
  id           String    @id @default(uuid()) @db.Uuid
  access_token String
  user_id      String    @db.Uuid
  expires_at   DateTime  @db.Timestamp
  created_at   DateTime? @default(now()) @db.Timestamp
}

model oauth_authorization_codes {
  authorization_code String   @id
  redirect_uri       String
  user_id            String   @db.Uuid
  expires_at         DateTime @db.Timestamp
}

model oauth_refresh_tokens {
  id            String    @id @default(uuid()) @db.Uuid
  refresh_token String    @unique
  user_id       String   @db.Uuid
  expires_at    DateTime  @db.Timestamp
  created_at    DateTime? @default(now()) @db.Timestamp
}
model account {
  id                       String    @id @default(uuid())
  usuario_id               String    @unique @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.Text
  access_token             String?   @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime? @default(now()) @db.Timestamp
  updatedAt                DateTime? @default(now()) @db.Timestamp
  usuario                  usuario   @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([usuario_id])
}

model verificationtoken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp

  @@unique([identifier, token])
}

model agente_propiedad {
  id          String    @id @default(uuid()) @db.Uuid
  propiedad_id  String    @db.Uuid @map("propertyId")
  agente_id     String    @db.Uuid @map("agentId")
  eliminado     Boolean?  @default(false) @map("deleted")
  propiedad     propiedad @relation(fields: [propiedad_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  empleado      empleado  @relation(fields: [agente_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index([agente_id])
  @@index([propiedad_id])
  @@map("agentes_propiedades")
}

model consulta_cliente {
  id          String    @id @default(uuid()) @db.Uuid
  propiedad_id  String    @db.Uuid @map("propertyId")
  agente_id     String    @db.Uuid @map("agentId")
  nombre        String    @map("firstName")
  apellido      String    @map("lastName")
  telefono      String    @map("phone")
  correo        String    @map("email")
  fecha         DateTime @db.Timestamp @map("date")
  descripcion   String?  @db.Text @map("description")
  propiedad     propiedad @relation(fields: [propiedad_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  empleado      empleado  @relation(fields: [agente_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index([agente_id])
  @@index([propiedad_id])
  @@map("consultas_clientes")
}

model imagen_persona {
  id         String   @id @default(uuid()) @db.Uuid
  persona_id String   @db.Uuid @map("personId")
  imagen     String?  @map("imagePath")
  persona    persona  @relation(fields: [persona_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@index([persona_id])
  @@map("imagenes_personas")
}
