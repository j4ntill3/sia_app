generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id                 String               @id @default(uuid()) @db.Uuid
  title              String
  categoryId         String               @db.Uuid
  locality           String
  address            String
  neighborhood       String
  numBedrooms        Int
  numBathrooms       Int
  surface            Float
  garage             Boolean
  deleted            Boolean?             @default(false)
  statusId           String               @db.Uuid
  clientInquiries    ClientInquiry[]
  propertyCategory   PropertyCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  propertyStatus     PropertyStatus       @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  propertyAgent      PropertyAgent[]
  propertyImage      PropertyImage[]

  @@index([statusId])
  @@index([categoryId])
}

model Person {
  id               String             @id @default(uuid()) @db.Uuid
  phone            String?
  lastName         String
  address          String?
  email            String             @unique
  createdAt        DateTime           @default(now())
  firstName        String
  dni              Int?               @unique
  deleted          Boolean
  personEmployee   PersonEmployee[]
  user             User[]
  personImage      PersonImage[]      // Relación con imágenes de persona
}

model Session {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  token      String
  createdAt  DateTime @default(now())
  deleted    Boolean
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String      @id @default(uuid()) @db.Uuid
  roleId        String      @db.Uuid
  password      String
  personId      String      @db.Uuid
  deleted       Boolean
  emailVerified DateTime?   @db.Timestamp
  createdAt     DateTime?   @default(now()) @db.Timestamp
  updatedAt     DateTime?   @default(now()) @db.Timestamp
  account       account?
  session       Session[]
  person        Person      @relation(fields: [personId], references: [id])
  userRole      UserRole    @relation(fields: [roleId], references: [id])

  @@index([personId])
  @@index([roleId])
}

model Employee {
  id                 String             @id @default(uuid()) @db.Uuid
  cuit               String             @unique
  hireDate           DateTime           @db.Date
  terminationDate    DateTime?          @db.Date
  typeId             String             @db.Uuid
  deleted            Boolean
  clientInquiries    ClientInquiry[]
  employeeType       EmployeeType       @relation(fields: [typeId], references: [id])
  propertyAgent      PropertyAgent[]
  personEmployee     PersonEmployee[]

  @@index([typeId])
}

model EmployeeType {
  id       String     @id @default(uuid()) @db.Uuid
  type     String     @unique
  employee Employee[]
}

model PersonEmployee {
  id             String   @id @default(uuid()) @db.Uuid
  personId       String   @db.Uuid
  employeeId     String   @db.Uuid
  createdAt      DateTime @default(now()) @db.Timestamp
  deleted        Boolean  @default(false)
  employee       Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person         Person   @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([employeeId])
  @@index([personId])
}

model UserRole {
  id        String    @id @default(uuid()) @db.Uuid
  roleType  String
  deleted   Boolean
  user      User[]
}

model PropertyStatus {
  id       String    @id @default(uuid()) @db.Uuid
  status   String
  property Property[]
}

model PropertyCategory {
  id       String    @id @default(uuid()) @db.Uuid
  category String
  property Property[]
}

model PropertyImage {
  id          String    @id @default(uuid()) @db.Uuid
  propertyId  String    @db.Uuid
  imagePath   String?
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([propertyId])
}

model oauth_access_tokens {
  id           String    @id @default(uuid()) @db.Uuid
  access_token String
  user_id      String    @db.Uuid
  expires_at   DateTime  @db.Timestamp
  created_at   DateTime? @default(now()) @db.Timestamp
}

model oauth_authorization_codes {
  authorization_code String   @id
  redirect_uri       String
  user_id            String   @db.Uuid
  expires_at         DateTime @db.Timestamp
}

model oauth_refresh_tokens {
  id            String    @id @default(uuid()) @db.Uuid
  refresh_token String    @unique
  user_id       String   @db.Uuid
  expires_at    DateTime  @db.Timestamp
  created_at    DateTime? @default(now()) @db.Timestamp
}

model account {
  id                       String    @id @default(uuid())
  userId                   String    @unique @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.Text
  access_token             String?   @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime? @default(now()) @db.Timestamp
  updatedAt                DateTime? @default(now()) @db.Timestamp
  user                     User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model verificationtoken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp

  @@unique([identifier, token])
}

model PropertyAgent {
  id          String    @id @default(uuid()) @db.Uuid
  propertyId  String    @db.Uuid
  agentId     String    @db.Uuid
  deleted     Boolean?  @default(false)
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee    Employee  @relation(fields: [agentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([agentId])
  @@index([propertyId])
}

model ClientInquiry {
  id          String    @id @default(uuid()) @db.Uuid
  propertyId  String    @db.Uuid
  agentId     String    @db.Uuid
  firstName   String
  lastName    String
  phone       String
  email       String
  date        DateTime @db.Timestamp
  description String?  @db.Text
  property    Property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee    Employee @relation(fields: [agentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([agentId])
  @@index([propertyId])
}

model PersonImage {
  id         String   @id @default(uuid()) @db.Uuid
  personId   String   @db.Uuid
  imagePath  String?
  person     Person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([personId])
}
