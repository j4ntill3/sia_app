generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model inmueble {
  id               Int               @id @default(autoincrement())
  title            String
  id_rubro         Int
  localidad        String
  direccion        String
  barrio           String
  num_habitaciones Int
  num_baños       Int               @map("num_baños")
  superficie       Float
  garaje           Boolean
  eliminado        Boolean?          @default(false)
  id_estado        Int
  inmueble_rubro   inmueble_rubro    @relation(fields: [id_rubro], references: [id], onDelete: Cascade, map: "fk_inmueble_rubro")
  inmueble_estado  inmueble_estado   @relation(fields: [id_estado], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_inmueble_estado")
  inmueble_imagen  inmueble_imagen[]

  @@index([id_estado], map: "fk_inmueble_estado")
  @@index([id_rubro], map: "fk_inmueble_rubro")
}

model persona {
  id               Int                @id @default(autoincrement())
  telefono         String?
  apellido         String
  direccion        String?
  email            String             @unique(map: "Persona_email_key")
  fechaCreacion    DateTime           @default(now())
  nombre           String
  DNI              Int?               @unique(map: "DNI")
  eliminado        Boolean
  persona_empleado persona_empleado[]
  usuario          usuario[]
}

model sesion {
  id         Int      @id @default(autoincrement())
  id_usuario Int
  token      String
  creado_en  DateTime @default(now())
  eliminado  Boolean
  usuario    usuario  @relation(fields: [id_usuario], references: [id], map: "Sesion_id_usuario_fkey")

  @@index([id_usuario], map: "Sesion_id_usuario_fkey")
}

model usuario {
  id         Int         @id @default(autoincrement())
  id_rol     Int
  clave      String
  id_persona Int
  eliminado  Boolean
  sesion     sesion[]
  persona    persona     @relation(fields: [id_persona], references: [id], map: "Usuario_id_persona_fkey")
  rolusuario rol_usuario @relation(fields: [id_rol], references: [id], map: "Usuario_id_rol_fkey")

  @@index([id_persona], map: "Usuario_id_persona_fkey")
  @@index([id_rol], map: "Usuario_id_rol_fkey")
}

model empleado {
  id               Int                @id @default(autoincrement())
  CUIT             String             @unique(map: "CUIT") @db.VarChar(20)
  Fecha_Alta       DateTime           @db.Date
  Fecha_Baja       DateTime?          @db.Date
  tipoId           Int
  eliminado        Boolean
  empleado_tipo    empleado_tipo      @relation(fields: [tipoId], references: [id], map: "Empleado_tipoId_fkey")
  persona_empleado persona_empleado[]

  @@index([tipoId], map: "Empleado_tipoId_fkey")
}

model empleado_tipo {
  id       Int        @id @default(autoincrement())
  tipo     String     @unique(map: "EmpleadoTipo_tipo_key")
  empleado empleado[]
}

model persona_empleado {
  id             Int      @id @default(autoincrement())
  idpersona      Int
  idempleado     Int
  fecha_creacion DateTime @default(now()) @db.DateTime(0)
  eliminado      Boolean  @default(false)
  empleado       empleado @relation(fields: [idempleado], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_idempleado")
  persona        persona  @relation(fields: [idpersona], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_idpersona")

  @@index([idempleado], map: "fk_idempleado")
  @@index([idpersona], map: "fk_idpersona")
}

model rol_usuario {
  id        Int       @id @default(autoincrement())
  tipo_rol  String
  eliminado Boolean
  usuario   usuario[]
}

model inmueble_estado {
  id       Int        @id @default(autoincrement())
  estado   String     @db.VarChar(255)
  inmueble inmueble[]
}

model inmueble_rubro {
  id       Int        @id @default(autoincrement())
  rubro    String     @db.VarChar(255)
  inmueble inmueble[]
}

model inmueble_imagen {
  id          Int      @id @default(autoincrement())
  id_inmueble Int
  ruta_imagen String?  @db.VarChar(255)
  eliminado   Boolean? @default(false)
  inmueble    inmueble @relation(fields: [id_inmueble], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_inmueble_imagen_inmueble")

  @@index([id_inmueble], map: "fk_inmueble_imagen_inmueble")
}

model oauth_access_tokens {
  id           Int       @id @default(autoincrement())
  access_token String    @db.VarChar(255)
  user_id      Int
  expires_at   DateTime  @db.DateTime(0)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
}

model oauth_authorization_codes {
  authorization_code String   @id @db.VarChar(255)
  redirect_uri       String   @db.VarChar(2048)
  user_id            Int
  expires_at         DateTime @db.DateTime(0)
}

model oauth_refresh_tokens {
  id            Int       @id @default(autoincrement())
  refresh_token String    @unique(map: "unique_refresh_token") @db.VarChar(255)
  user_id       Int
  expires_at    DateTime  @db.DateTime(0)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
}
